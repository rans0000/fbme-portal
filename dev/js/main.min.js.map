{"version":3,"sources":["app.core.module.js","app.controller.js","app.core.constants.js","branch/branch.module.js","dashboard/dashboard.module.js","headerArea/headerArea.module.js","login/login.module.js","role/role.module.js","branch/branch.controller.js","branch/branch.service.js","common/user.service.js","common/utils.service.js","dashboard/dashboard.controller.js","dashboard/dashboard.service.js","headerArea/headerArea.controller.js","headerArea/headerArea.service.js","login/login.controller.js","login/login.service.js","role/role.controller.js","role/role.service.js","branch/create-update/branch.create.update.controller.js","common/confirmDialog/confirm.dialog.controller.js","common/tree/branch.directive.js","common/tree/slide.toggle.directive.js","common/tree/stop.propagation.directve.js","common/tree/tree.directive.js","role/create-update/role.create.update.controller.js"],"names":["httpProviderConfiguration","$httpProvider","defaults","headers","post","paramSerializer","routerConfiguration","$stateProvider","$urlRouterProvider","otherwise","interceptors","push","state","url","templateUrl","controller","controllerAs","abstract","views","","headerArea@root","httpRequestInterceptor","$q","webServiceURL","interceptResponseSuccess","response","returnValue","config","startsWith","apiBase","data","header","responseCode","reject","body","interceptResponseError","errObj","status","message","statusText","requestUrl","interceptObject","responseError","jQueryService","jQuery","debugConfiguration","$compileProvider","debugInfoEnabled","angular","module","factory","$inject","AppController","utils","vm","this","css","getCss","getWebServiceURL","temp","login","roleList","roleDetails","roleCreate","roleUpdate","roledelete","getPermissions","PERSONAL_DOCS","ADMIN","COLLABORATION_ADMIN","ROLE_MANAGEMENT","BRANCH_MANAGEMENT","DEPARTMENT_MANAGEMENT","SETTINGS_MANAGEMENT","USER_MANAGEMENT","USER_GROUP_MANAGEMENT","constant","BranchController","branchService","$uibModal","toastr","init","onAllAPISuccess","getSidenavItems","then","populateSidenav","loadBranchList","searchOptions","onLoadBranchListSuccess","catch","onLoadBranchListError","branchList","items","totalItems","totalNumPages","error","errorTranslation","getErrorTranslationValue","onDeleteBranchInitiate","branchItem","deletePopupData","getDeletePopupData","successResult","id","description","name","modalInstance","open","ariaLabelledBy","ariaDescribedBy","size","resolve","dialogData","result","deleteBranch","headingText","confirmText","cancelText","cancelResult","branchId","requestObj","ids","onDeleteBranchSuccess","onDeleteBranchError","console","log","success","onUpdateBranchInitiate","item","loadBranchDetails","onLoadBranchDetailsSuccess","onLoadBranchDetailsError","updateBranchPopupData","onUpdateBranchSuccess","getUpdateBranchPopupData","currentPermissions","mode","translation","onCreateBranchInitiate","createBranchPopupData","privileges","onCreateBranchSuccess","getCreateBranchPopupData","loadBranchData","idList","split","map","parseInt","trim","filter","isNaN","join","createdByUserIds","undefined","getSearchOptions","nowDate","Date","fromDate","setFullYear","getFullYear","page","pageSize","sortBy","sortOrder","searchText","createdDateFrom","createdDateTo","getAdvSearchOptions","isOpen","dateCreatedFromIsOpen","dateCreatedToIsOpen","itemTree","selectedFolder","isExpandedState","advSearch","$http","permissions","loadRoleList","get","params","deleteRole","branchdelete","createRole","branchCreate","updateRole","branchUpdate","loadRoleDetails","branchDetails","getPermissionArray","returObj","unselected","selected","key","indexOf","loadSideMenu","errorcode","errorHandler","branchObj","userService","saveCurrentUserProfile","userProfile","currentUserProfile","copy","privilegeArray","getAllCurrentUserProfile","getCurrentUserProfile","property","value","hasOwnProperty","hasPermission","permissionString","isValid","userObj","utilsFactory","$localStorage","getLanguage","lang","setLanguage","setCss","getTranslation","allTranslations","loadTranslation","getLanguagesAvailable","langCode","direction","errorCode","errStr","utilsObj","DashboardController","dashboardService","dashObject","HeaderAreaController","headerAreaService","currentUser","populateCurrentUserObj","headerObj","LoginController","$state","loginService","$scope","selectedLanguage","languagesAvailable","find","onGetTranslationSuccess","onGetTranslationError","cmcm_TranslationLoadError","onLoginSubmit","validateLoginForm","user","requestLogin","onLoginSuccess","onLoginError","go","onLanguageChange","$parent","app","password","obj","userName","Password","loginObj","RoleController","roleService","onLoadRoleListSuccess","onLoadRoleListError","onDeleteRoleInitiate","roleItem","roleId","onDeleteRoleSuccess","onDeleteRoleError","onUpdateRoleInitiate","onLoadRoleDetailsSuccess","onLoadRoleDetailsError","updateRolePopupData","onUpdateRoleSuccess","getUpdateRolePopupData","onCreateRoleInitiate","createRolePopupData","onCreateRoleSuccess","getCreateRolePopupData","loadRoleData","roleObject","BranchUpdateController","$uibModalInstance","validateBranchDetail","branch","movePermissions","item1","item2","forceMove","Object","keys","length","nextTab","activeTab","cancel","dismiss","createUpdateBranch","createBranch","updateBranch","createPermissionString","selectedPermissions","onCreateBranchError","close","onUpdateBranchError","Obj","permissionList","unselectedPermissions","ModalInstanceCtrl","ok","branchDirective","$compile","$","branchLink","scope","element","attributes","ctrl","toggleOpenState","event","stopPropagation","$element","children","slideDown","$emit","slideUp","isArray","cloned","append","onItemClick","sref","onFolderSelect","isActive","folderOpenedLitener","checkForInnerFolder","hasFolder","forEach","type","hasInnerFolder","$on","directiveObject","replace","restrict","link","bindToController","directive","slideToggleDirective","slideToggleLink","on","hasClass","siblings","stopPropagationDirective","stopPropagationLink","TreeController","collection","treeDirective","treeLink","RoleUpdateController","validateRoleDetail","role","createUpdateRole","onCreateRoleError","onUpdateRoleError"],"mappings":"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","file":"main.min.js","sourcesContent":["/*jshint browser: true*/\r\n/*global angular: true*/\r\n/*global jQuery: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module', [\r\n        'ui.router',\r\n        'ui.bootstrap',\r\n        'toastr',\r\n        'ngStorage',\r\n        'headerArea.module',\r\n        'ui.bootstrap.contextMenu',\r\n        'login.module',\r\n        'dashboard.module',\r\n        'role.module',\r\n        'branch.module'\r\n    ])\r\n        .config(httpProviderConfiguration)\r\n        .config(routerConfiguration)\r\n        .config(debugConfiguration)\r\n        .factory('httpRequestInterceptor', httpRequestInterceptor)\r\n        .factory('jQuery', jQueryService);\r\n\r\n    httpProviderConfiguration.$inject = ['$httpProvider'];\r\n    function httpProviderConfiguration ($httpProvider) {\r\n        $httpProvider.defaults.headers.post[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\r\n        $httpProvider.defaults.paramSerializer = '$httpParamSerializerJQLike';\r\n    }\r\n\r\n    routerConfiguration.$inject = ['$stateProvider', '$urlRouterProvider', '$httpProvider'];\r\n    function routerConfiguration ($stateProvider, $urlRouterProvider, $httpProvider) {\r\n        $urlRouterProvider.otherwise('/login');\r\n        $httpProvider.interceptors.push('httpRequestInterceptor');\r\n\r\n        $stateProvider\r\n            .state('login', {\r\n            url: '/login',\r\n            templateUrl: 'js/modules/login/login.template.html',\r\n            controller: 'LoginController',\r\n            controllerAs: 'login'\r\n        })\r\n            .state('root', {\r\n            abstract: true,\r\n            views: {\r\n                '': {\r\n                    templateUrl: 'js/modules/contentArea/contentArea.template.html'\r\n                },\r\n                'headerArea@root': {\r\n                    templateUrl: 'js/modules/headerArea/headerArea.template.html',\r\n                    controller: 'HeaderAreaController',\r\n                    controllerAs: 'header'\r\n                }\r\n            }\r\n        })/*\r\n            .state('dashboard', {\r\n            url: '/dashboard',\r\n            templateUrl: 'js/modules/dashboard/dashboard.template.html',\r\n            controller: 'DashboardController',\r\n            controllerAs: 'vm'\r\n        })*/;\r\n    }\r\n\r\n    httpRequestInterceptor.$inject = ['$q', 'webServiceURL'];\r\n    function httpRequestInterceptor ($q, webServiceURL) {\r\n        var interceptObject = {};\r\n        //interceptObject.request = interceptRequest;\r\n        interceptObject.response = interceptResponseSuccess;\r\n        interceptObject.responseError = interceptResponseError;\r\n        return interceptObject;\r\n\r\n        function interceptResponseSuccess (response) {\r\n            var returnValue = response;\r\n            if(response.config.url.startsWith(webServiceURL.apiBase)){\r\n                //response.data.header.responseCode is FD200 for success\r\n                if(response.data.header && response.data.header.responseCode !== 'FD200'){\r\n                    returnValue = $q.reject(response.data);\r\n                }\r\n                else{\r\n                    returnValue = response.data.body? response.data.body : {};\r\n                }\r\n            }\r\n            return returnValue;\r\n        }\r\n\r\n        function interceptResponseError (response) {\r\n            var errObj = {\r\n                header: {\r\n                    responseCode: response.status,\r\n                    message: response.statusText,\r\n                    requestUrl: response.config.url\r\n                }\r\n            };\r\n            return $q.reject(errObj);\r\n        }\r\n    }\r\n\r\n    function jQueryService () {\r\n        return jQuery;\r\n    }\r\n\r\n    debugConfiguration.$inject = ['$compileProvider'];\r\n    function debugConfiguration ($compileProvider) {\r\n        $compileProvider.debugInfoEnabled(false);\r\n    }\r\n\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .controller('AppController', AppController);\r\n\r\n    AppController.$inject = ['utils'];\r\n    function AppController (utils) {\r\n        var vm = this;\r\n        vm.css = utils.getCss();\r\n    }\r\n\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .constant('webServiceURL', getWebServiceURL())\r\n        .constant('permissions', getPermissions());\r\n\r\n    function getWebServiceURL () {\r\n        var temp = {\r\n            apiBase: 'http://localhost:8090/FDocs/api/',\r\n            login: 'auth/login.json',\r\n            roleList: 'role/list.json',\r\n            roleDetails: 'role/details.json',\r\n            roleCreate: 'role/create.json',\r\n            roleUpdate: 'role/update.json',\r\n            roledelete: 'role/delete.json'\r\n        };\r\n        return temp;\r\n    }\r\n\r\n    function getPermissions () {\r\n        var temp = {\r\n            PERSONAL_DOCS: 1,\r\n            ADMIN: 2,\r\n            COLLABORATION_ADMIN: 4,\r\n            ROLE_MANAGEMENT: 8,\r\n            BRANCH_MANAGEMENT: 16,\r\n            DEPARTMENT_MANAGEMENT: 32,\r\n            SETTINGS_MANAGEMENT: 64,\r\n            USER_MANAGEMENT: 128,\r\n            USER_GROUP_MANAGEMENT: 256\r\n        };\r\n        return temp;\r\n    }\r\n\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('branch.module', [])\r\n        .config(routerConfiguration);\r\n\r\n    routerConfiguration.$inject = ['$stateProvider'];\r\n    function routerConfiguration ($stateProvider) {\r\n        $stateProvider\r\n            .state('root.branch', {\r\n            url: '/branch',\r\n            templateUrl: 'js/modules/branch/branch.template.html',\r\n            controller: 'BranchController',\r\n            controllerAs: 'branch'\r\n        });\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('dashboard.module', [])\r\n        .config(routerConfiguration);\r\n\r\n    routerConfiguration.$inject = ['$stateProvider'];\r\n    function routerConfiguration ($stateProvider) {\r\n        $stateProvider\r\n            .state('root.dashboard', {\r\n            url: '/dashboard',\r\n            templateUrl: 'js/modules/dashboard/dashboard.template.html',\r\n            controller: 'DashboardController',\r\n            controllerAs: 'dash'\r\n        });\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('headerArea.module', []);\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('login.module', []);\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('role.module', [])\r\n        .config(routerConfiguration);\r\n\r\n    routerConfiguration.$inject = ['$stateProvider'];\r\n    function routerConfiguration ($stateProvider) {\r\n        $stateProvider\r\n            .state('root.role', {\r\n            url: '/role',\r\n            templateUrl: 'js/modules/role/role.template.html',\r\n            controller: 'RoleController',\r\n            controllerAs: 'role'\r\n        });\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('branch.module')\r\n        .controller('BranchController', BranchController);\r\n\r\n    BranchController.$inject = ['branchService', '$uibModal', 'toastr'];\r\n\r\n    function BranchController (branchService, $uibModal, toastr) {\r\n\r\n        var vm = this;\r\n        vm.branchList = [];\r\n        vm.isExpandedState = true;\r\n        vm.deletePopupData = {};\r\n        vm.updateBranchPopupData = getUpdateBranchPopupData();\r\n        vm.createBranchPopupData = getCreateBranchPopupData();\r\n        vm.searchOptions = getSearchOptions();\r\n        vm.advSearch = getAdvSearchOptions();\r\n        vm.idList = '';\r\n\r\n        vm.onDeleteBranchInitiate = onDeleteBranchInitiate;\r\n        vm.onUpdateBranchInitiate = onUpdateBranchInitiate;\r\n        vm.onCreateBranchInitiate = onCreateBranchInitiate;\r\n        vm.loadBranchData = loadBranchData;\r\n\r\n        init();\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function init () {\r\n            onAllAPISuccess();\r\n            branchService.getSidenavItems()\r\n                .then(populateSidenav);\r\n        }\r\n\r\n        function onAllAPISuccess () {\r\n            loadBranchList();\r\n        }\r\n\r\n        function loadBranchList () {\r\n            branchService.loadBranchList(vm.searchOptions)\r\n                .then(onLoadBranchListSuccess)\r\n                .catch(onLoadBranchListError);\r\n        }\r\n\r\n        function onLoadBranchListSuccess (response) {\r\n            //console.log(response);\r\n            vm.branchList = response.items;\r\n            vm.searchOptions.totalItems = response.totalNumPages;\r\n        }\r\n\r\n        function onLoadBranchListError (error) {\r\n            //console.log(error);\r\n            var errorTranslation = branchService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at listing Branch');\r\n        }\r\n\r\n        function onDeleteBranchInitiate (branchItem) {\r\n            vm.deletePopupData = getDeletePopupData();\r\n            vm.deletePopupData.successResult = branchItem.id;\r\n            vm.deletePopupData.description = 'Do you want to delete this branch (' + branchItem.name + ')?';\r\n\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/common/confirmDialog/confirm.dialog.template.html',\r\n                controller: 'ModalInstanceCtrl',\r\n                controllerAs: '$ctrl',\r\n                size: 'sm',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.deletePopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(deleteBranch);\r\n        }\r\n\r\n        function getDeletePopupData () {\r\n            var temp = {\r\n                headingText: 'Delete Branch',\r\n                confirmText: 'Yes',\r\n                cancelText: 'No',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel'\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function deleteBranch (branchId) {\r\n            var requestObj = {\r\n                ids: [branchId]\r\n            };\r\n            branchService.deleteBranch(requestObj)\r\n                .then(onDeleteBranchSuccess)\r\n                .catch(onDeleteBranchError);\r\n        }\r\n\r\n        function onDeleteBranchSuccess (response) {\r\n            console.log(response);\r\n            toastr.success('Deleted the branch', 'Delete Branch');\r\n            //reload branch table\r\n            loadBranchList();\r\n        }\r\n\r\n        function onDeleteBranchError (error) {\r\n            var errorTranslation = branchService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at listing Branch');\r\n        }\r\n\r\n        function onUpdateBranchInitiate (item) {\r\n            var requestObj = {\r\n                id: item.id\r\n            };\r\n            branchService.loadBranchDetails(requestObj)\r\n                .then(onLoadBranchDetailsSuccess)\r\n                .catch(onLoadBranchDetailsError);\r\n        }\r\n\r\n        function onLoadBranchDetailsSuccess (response) {\r\n            vm.updateBranchPopupData.item = response.items[0];\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/branch/create-update/branch.create.update.template.html',\r\n                controller: 'BranchUpdateController',\r\n                controllerAs: 'branchDialog',\r\n                size: 'md',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.updateBranchPopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(onUpdateBranchSuccess);\r\n        }\r\n\r\n        function onLoadBranchDetailsError (error) {\r\n            console.log(error);\r\n            var errorTranslation = branchService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at loading Branch details');\r\n        }\r\n\r\n        function onUpdateBranchSuccess () {\r\n            //update tree\r\n            loadBranchList();\r\n        }\r\n\r\n        function getUpdateBranchPopupData () {\r\n            var temp = {\r\n                headingText: 'Update Branch',\r\n                confirmText: 'Update',\r\n                cancelText: 'Cancel',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel',\r\n                currentPermissions: [],\r\n                item: null,\r\n                mode: 'update',\r\n                translation: null\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function onCreateBranchInitiate () {\r\n            vm.createBranchPopupData.item = {\r\n                name: '',\r\n                description: '',\r\n                privileges: ''\r\n            };\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/branch/create-update/branch.create.update.template.html',\r\n                controller: 'BranchUpdateController',\r\n                controllerAs: 'branchDialog',\r\n                size: 'md',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.createBranchPopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(onCreateBranchSuccess);\r\n        }\r\n\r\n        function onCreateBranchSuccess () {\r\n            //update tree\r\n            loadBranchList();\r\n        }\r\n\r\n        function getCreateBranchPopupData () {\r\n            var temp = {\r\n                headingText: 'Create Branch',\r\n                confirmText: 'Create',\r\n                cancelText: 'Cancel',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel',\r\n                currentPermissions: [],\r\n                item: null,\r\n                mode: 'create',\r\n                translation: null\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function loadBranchData () {\r\n            var temp = vm.idList\r\n            .split(/\\s*,\\s*/)\r\n            .map(function (item) {\r\n                return parseInt(item.trim(), 10);\r\n            })\r\n            .filter(function (item) {\r\n                return !isNaN(item);\r\n            })\r\n            .join(',');\r\n            vm.searchOptions.createdByUserIds = temp || undefined;\r\n            loadBranchList();\r\n        }\r\n\r\n        function getSearchOptions () {\r\n            var nowDate = new Date();\r\n            var fromDate = new Date(nowDate);\r\n            fromDate.setFullYear(fromDate.getFullYear() - 1);\r\n\r\n            var temp = {\r\n                totalItems: 0,\r\n                page : 1,\r\n                pageSize: 30,\r\n                sortBy: 'name',\r\n                sortOrder: 'A',\r\n                searchText: '',\r\n                createdDateFrom: fromDate,\r\n                createdDateTo: nowDate,\r\n                createdByUserIds: []\r\n            };\r\n            return temp;\r\n        }\r\n\r\n        function getAdvSearchOptions () {\r\n            var temp = {\r\n                isOpen: false,\r\n                dateCreatedFromIsOpen: false,\r\n                dateCreatedToIsOpen: false\r\n            };\r\n            return temp;\r\n        }\r\n\r\n        function populateSidenav (response) {\r\n            vm.itemTree = response;\r\n            vm.selectedFolder = vm.itemTree[0];\r\n        }\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('branch.module')\r\n        .factory('branchService', branchService);\r\n\r\n    branchService.$inject = ['$http', 'webServiceURL', 'utils', 'permissions'];\r\n\r\n    function branchService ($http, webServiceURL, utils, permissions) {\r\n        var branchObj = {};\r\n        branchObj.loadRoleList = loadRoleList;\r\n        branchObj.loadRoleDetails = loadRoleDetails;\r\n        branchObj.createRole = createRole;\r\n        branchObj.updateRole = updateRole;\r\n        branchObj.deleteRole = deleteRole;\r\n        branchObj.getPermissionArray = getPermissionArray;\r\n        branchObj.getSidenavItems = getSidenavItems;\r\n        branchObj.getErrorTranslationValue = getErrorTranslationValue;\r\n\r\n        return branchObj;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function loadRoleList (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.branchList;\r\n            return $http.get(url, {params: requestObj});\r\n        }\r\n\r\n        function deleteRole (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.branchdelete;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function createRole (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.branchCreate;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function updateRole (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.branchUpdate;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function loadRoleDetails (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.branchDetails;\r\n            return $http.get(url, requestObj);\r\n        }\r\n\r\n        function getPermissionArray (privileges) {\r\n            var temp = privileges.split(',');\r\n            var returObj = {\r\n                unselected: {},\r\n                selected: {}\r\n            };\r\n            for(var key in permissions){\r\n                if(temp.indexOf(key) < 0){\r\n                    returObj.selected[key] = false;\r\n                }\r\n                else{\r\n                    returObj.unselected[key] = false;\r\n                }\r\n            }\r\n            return returObj;\r\n        }\r\n\r\n        function getSidenavItems () {\r\n            return utils.loadSideMenu('administration');\r\n        }\r\n        \r\n        function getErrorTranslationValue (errorcode) {\r\n            return utils.errorHandler(errorcode);\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .factory('userService', userService);\r\n\r\n    function userService () {\r\n        var userObj = {};\r\n        var currentUserProfile;\r\n\r\n        userObj.saveCurrentUserProfile = saveCurrentUserProfile;\r\n        userObj.getAllCurrentUserProfile = getAllCurrentUserProfile;\r\n        userObj.getCurrentUserProfile = getCurrentUserProfile;\r\n        userObj.hasPermission = hasPermission;\r\n\r\n        return userObj;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function saveCurrentUserProfile (userProfile) {\r\n            currentUserProfile = angular.copy(userProfile);\r\n            currentUserProfile.privilegeArray = currentUserProfile.privileges.split(',');\r\n            userProfile = null;\r\n        }\r\n        \r\n        function getAllCurrentUserProfile () {\r\n            return angular.copy(currentUserProfile);\r\n        }\r\n        \r\n        function getCurrentUserProfile (property) {\r\n            var value;\r\n            if(currentUserProfile.hasOwnProperty){\r\n                value = currentUserProfile[property];\r\n            }\r\n            else{\r\n                throw {message: 'Missing property in Current user profile'};\r\n            }\r\n            return value;\r\n        }\r\n        \r\n        function hasPermission (permissionString) {\r\n            var isValid = (currentUserProfile.privilegeArray.indexOf(permissionString) === -1)? false: true;\r\n            return isValid;\r\n        }\r\n    }\r\n\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .factory('utils', utilsFactory);\r\n\r\n    utilsFactory.$inject = ['$q', '$http', '$localStorage'];\r\n    function utilsFactory ($q, $http, $localStorage) {\r\n        var utilsObj = {};\r\n        var allTranslations;\r\n        utilsObj.getLanguage = getLanguage;\r\n        utilsObj.setLanguage = setLanguage;\r\n        utilsObj.getCss = getCss;\r\n        utilsObj.setCss = setCss;\r\n        utilsObj.getTranslation = getTranslation;\r\n        utilsObj.getLanguagesAvailable = getLanguagesAvailable;\r\n        utilsObj.errorHandler = errorHandler;\r\n        utilsObj.loadSideMenu = loadSideMenu;\r\n        return utilsObj;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function getLanguage () {\r\n            $localStorage.lang = $localStorage.lang || 'en-US';\r\n            return $localStorage.lang;\r\n        }\r\n\r\n        function setLanguage (lang) {\r\n            $localStorage.lang = lang;\r\n        }\r\n\r\n        function getCss () {\r\n            $localStorage.css = $localStorage.css || 'lang-en';\r\n            return $localStorage.css;\r\n        }\r\n\r\n        function setCss (css) {\r\n            $localStorage.css = css;\r\n        }\r\n\r\n        function getTranslation (lang) {\r\n            var temp = allTranslations? $q.resolve(allTranslations) : loadTranslation(lang);\r\n            return temp;\r\n        }\r\n        function loadTranslation (lang) {\r\n            var url = 'data/translations/translations.all-' + lang + '.json';\r\n            return $http.get(url)\r\n                .then(function (response) {\r\n                return response.data.translation;\r\n            })\r\n                .catch(function (error) {\r\n                return $q.reject(error);\r\n            });\r\n        }\r\n\r\n        function getLanguagesAvailable () {\r\n            return [\r\n                {name: 'English', langCode: 'en-US', css: 'lang-en', direction: 'ltr'},\r\n                {name: 'العَرَبِيَّة', langCode: 'ar', css: 'lang-ar', direction: 'rtl'}\r\n            ];\r\n        }\r\n\r\n        function errorHandler (errorCode) {\r\n            var errStr;\r\n            switch(errorCode){\r\n                case 'FD200': errStr = 'cmcm_Success';break;\r\n                case 'FD207': errStr = 'cmcm_MultipleStatusCodes';break;\r\n                case 'FD400': errStr = 'cmcm_BadRequest';break;\r\n                case 'FD500': errStr = 'cmcm_ServerError';break;\r\n                case 'FD401': errStr = 'cmcm_UnauthorizedAccess';break;\r\n                case 'FD501': errStr = 'cmcm_UnsupportedOperation';break;\r\n                case 'FD412': errStr = 'cmcm_LoginRequired';break;\r\n                case 'FD406': errStr = 'cmcm_InvalidCredentials';break;\r\n                case 'FD101': errStr = 'cmcm_ValidUserNameRequired';break;\r\n                case 'FD102': errStr = 'cmcm_ValidPasswordRequired';break;\r\n                case 'FD103': errStr = 'cmcm_ValidNameRequired';break;\r\n                case 'FD104': errStr = 'cmcm_ValidDescriptionRequired';break;\r\n                case 'FD105': errStr = 'cmcm_ValidIdRequired';break;\r\n                case 'FD106': errStr = 'cmcm_ValidIdsRequired';break;\r\n                case 'FD107': errStr = 'cmcm_ValidPageRequired';break;\r\n                case 'FD108': errStr = 'cmcm_ValidPageSizeRequired';break;\r\n                case 'FD109': errStr = 'cmcm_ValidSortByRequired';break;\r\n                case 'FD110': errStr = 'cmcm_NameNotAvailable';break;\r\n                case 'FD111': errStr = 'cmcm_RoleIsInUse';break;\r\n                case 'FD112': errStr = 'cmcm_RoleNotFound';break;\r\n                case 'FD113': errStr = 'cmcm_CodeNotAvailable';break;\r\n                case 'FD114': errStr = 'cmcm_ValidCodeRequired';break;\r\n                case 'FD115': errStr = 'cmcm_ValidAddress1Required';break;\r\n                case 'FD116': errStr = 'cmcm_ValidAddress2Required';break;\r\n                case 'FD117': errStr = 'cmcm_ValidAddress3Required';break;\r\n                case 'FD118': errStr = 'cmcm_ValidAddress4Required';break;\r\n                case 'FD119': errStr = 'cmcm_ValidZipRequired';break;\r\n                case 'FD120': errStr = 'cmcm_BranchNotFound';break;\r\n                case 'FD121': errStr = 'cmcm_DepartmentNotFound';break;\r\n                case 'FD122': errStr = 'cmcm_ValidFirstNameRequired';break;\r\n                case 'FD123': errStr = 'cmcm_ValidMiddleNameRequired';break;\r\n                case 'FD124': errStr = 'cmcm_ValidLastNameRequired';break;\r\n                case 'FD125': errStr = 'cmcm_ValidEmailRequired';break;\r\n                case 'FD126': errStr = 'cmcm_ValidTimeZoneRequired';break;\r\n                case 'FD127': errStr = 'cmcm_ValidActivationDateRequired';break;\r\n                case 'FD128': errStr = 'cmcm_ValidDateFormatRequired';break;\r\n                case 'FD129': errStr = 'cmcm_UserNameNotAvailable';break;\r\n                case 'FD130': errStr = 'cmcm_EmailIdNotAvailable';break;\r\n                case 'FD131': errStr = 'cmcm_UserNotFound';break;\r\n                default: errStr = 'cmcm_UnknownError';break;\r\n            }\r\n            return errStr;\r\n        }\r\n\r\n        function loadSideMenu (module) {\r\n            return $http.get('data/menu-data.json')\r\n                .then(function (response) {\r\n                var temp = module? response.data[module] : response.data;\r\n                return temp;\r\n            })\r\n                .catch(function (error) {\r\n                return error;\r\n            });\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('dashboard.module')\r\n        .controller('DashboardController', DashboardController);\r\n\r\n    DashboardController.$inject = [];\r\n\r\n    function DashboardController () {\r\n\r\n        var vm = this;\r\n        vm.status = true;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('dashboard.module')\r\n        .factory('dashboardService', dashboardService);\r\n\r\n    dashboardService.$inject = [];\r\n\r\n    function dashboardService () {\r\n        var dashObject = {};\r\n        return dashObject;\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('headerArea.module')\r\n        .controller('HeaderAreaController', HeaderAreaController);\r\n\r\n    HeaderAreaController.$inject = ['headerAreaService'];\r\n\r\n    function HeaderAreaController (headerAreaService) {\r\n\r\n        var vm = this;\r\n        vm.currentUser = {};\r\n        \r\n        init();\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n        \r\n        function init () {\r\n            vm.currentUser = headerAreaService.populateCurrentUserObj();\r\n        }\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('headerArea.module')\r\n        .factory('headerAreaService', headerAreaService);\r\n\r\n    headerAreaService.$inject = ['userService'];\r\n\r\n    function headerAreaService (userService) {\r\n        var headerObj = {};\r\n        headerObj.populateCurrentUserObj = populateCurrentUserObj;\r\n        return headerObj;\r\n        \r\n        //--------------------------------------\r\n        //function declarations\r\n        \r\n        function populateCurrentUserObj () {\r\n            return userService.getAllCurrentUserProfile();\r\n        }\r\n        \r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('login.module')\r\n        .controller('LoginController', LoginController);\r\n\r\n    LoginController.$inject = ['$state', 'loginService', 'toastr', 'utils', '$scope'];\r\n\r\n    function LoginController ($state, loginService, toastr, utils, $scope) {\r\n\r\n        var vm = this;\r\n        vm.user ={\r\n            name: '',\r\n            password: ''\r\n        };\r\n        vm.translation = {};\r\n        vm.languagesAvailable = utils.getLanguagesAvailable();\r\n        vm.selectedLanguage = null;\r\n\r\n        vm.onLoginSubmit = onLoginSubmit;\r\n        vm.onLanguageChange = onLanguageChange;\r\n\r\n        init();\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function init () {\r\n            var lang = utils.getLanguage();\r\n            vm.selectedLanguage = vm.languagesAvailable.find(function (item) {\r\n                return item.langCode === lang;\r\n            });\r\n            loadTranslation(lang);\r\n        }\r\n\r\n        function loadTranslation (lang) {\r\n            utils.getTranslation(lang)\r\n                .then(onGetTranslationSuccess)\r\n                .catch(onGetTranslationError);\r\n        }\r\n\r\n        function onGetTranslationSuccess (response) {\r\n            //console.log(response);\r\n            vm.translation = response;\r\n        }\r\n\r\n        function onGetTranslationError (error) {\r\n            //console.log(error);\r\n            toastr.error(vm.translation.cmcm_TranslationLoadError);\r\n        }\r\n\r\n        function onLoginSubmit () {\r\n            var isValid = loginService.validateLoginForm(vm.user);\r\n            if(isValid){\r\n                loginService.requestLogin(vm.user)\r\n                    .then(onLoginSuccess)\r\n                    .catch(onLoginError);\r\n            }\r\n        }\r\n\r\n        function onLoginSuccess (response) {\r\n            loginService.saveCurrentUserProfile(response.items[0]);\r\n            $state.go('root.dashboard');\r\n        }\r\n\r\n        function onLoginError (error) {\r\n            var errorTranslation = loginService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Login Error');\r\n        }\r\n\r\n        function onLanguageChange () {\r\n            var langCode = vm.selectedLanguage.langCode;\r\n            utils.setLanguage(langCode);\r\n            loadTranslation(langCode);\r\n            $scope.$parent.app.css = vm.selectedLanguage.css;\r\n            utils.setCss(vm.selectedLanguage.css);\r\n        }\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('login.module')\r\n        .factory('loginService', loginService);\r\n\r\n    loginService.$inject = ['$http', 'webServiceURL', 'utils', 'userService'];\r\n\r\n    function loginService ($http, webServiceURL, utils, userService) {\r\n        var loginObj = {};\r\n        loginObj.validateLoginForm = validateLoginForm;\r\n        loginObj.requestLogin = requestLogin;\r\n        loginObj.saveCurrentUserProfile = saveCurrentUserProfile;\r\n        loginObj.getErrorTranslationValue = getErrorTranslationValue;\r\n\r\n        return loginObj;\r\n\r\n        function validateLoginForm (requestObj) {\r\n            var isValid = (requestObj.name.trim() && requestObj.password.trim())? true : false;\r\n            return isValid;\r\n        }\r\n\r\n        function requestLogin (requestObj) {\r\n            var obj = {\r\n                userName: requestObj.name,\r\n                Password: requestObj.password\r\n            };\r\n            var url = webServiceURL.apiBase + webServiceURL.login;\r\n            return $http.post(url, obj);\r\n        }\r\n\r\n        function saveCurrentUserProfile (userProfile) {\r\n            userService.saveCurrentUserProfile(userProfile);\r\n        }\r\n\r\n        function getErrorTranslationValue (errorcode) {\r\n            return utils.errorHandler(errorcode);\r\n        }\r\n\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('role.module')\r\n        .controller('RoleController', RoleController);\r\n\r\n    RoleController.$inject = ['roleService', '$uibModal', 'toastr'];\r\n\r\n    function RoleController (roleService, $uibModal, toastr) {\r\n\r\n        var vm = this;\r\n        vm.roleList = [];\r\n        vm.isExpandedState = true;\r\n        vm.deletePopupData = {};\r\n        vm.updateRolePopupData = getUpdateRolePopupData();\r\n        vm.createRolePopupData = getCreateRolePopupData();\r\n        //vm.itemTree = roleService.getSidenavItems();\r\n        //vm.selectedFolder = vm.itemTree[0];\r\n        vm.searchOptions = getSearchOptions();\r\n        vm.advSearch = getAdvSearchOptions();\r\n        vm.idList = '';\r\n\r\n        vm.onDeleteRoleInitiate = onDeleteRoleInitiate;\r\n        vm.onUpdateRoleInitiate = onUpdateRoleInitiate;\r\n        vm.onCreateRoleInitiate = onCreateRoleInitiate;\r\n        vm.loadRoleData = loadRoleData;\r\n\r\n        init();\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function init () {\r\n            onAllAPISuccess();\r\n            roleService.getSidenavItems()\r\n                .then(populateSidenav);\r\n        }\r\n\r\n        function onAllAPISuccess () {\r\n            loadRoleList();\r\n        }\r\n\r\n        function loadRoleList () {\r\n            roleService.loadRoleList(vm.searchOptions)\r\n                .then(onLoadRoleListSuccess)\r\n                .catch(onLoadRoleListError);\r\n        }\r\n\r\n        function onLoadRoleListSuccess (response) {\r\n            //console.log(response);\r\n            vm.roleList = response.items;\r\n            vm.searchOptions.totalItems = response.totalNumPages;\r\n        }\r\n\r\n        function onLoadRoleListError (error) {\r\n            //console.log(error);\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at listing Role');\r\n        }\r\n\r\n        function onDeleteRoleInitiate (roleItem) {\r\n            vm.deletePopupData = getDeletePopupData();\r\n            vm.deletePopupData.successResult = roleItem.id;\r\n            vm.deletePopupData.description = 'Do you want to delete this role (' + roleItem.name + ')?';\r\n\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/common/confirmDialog/confirm.dialog.template.html',\r\n                controller: 'ModalInstanceCtrl',\r\n                controllerAs: '$ctrl',\r\n                size: 'sm',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.deletePopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(deleteRole);\r\n        }\r\n\r\n        function getDeletePopupData () {\r\n            var temp = {\r\n                headingText: 'Delete Role',\r\n                confirmText: 'Yes',\r\n                cancelText: 'No',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel'\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function deleteRole (roleId) {\r\n            var requestObj = {\r\n                ids: [roleId]\r\n            };\r\n            roleService.deleteRole(requestObj)\r\n                .then(onDeleteRoleSuccess)\r\n                .catch(onDeleteRoleError);\r\n        }\r\n\r\n        function onDeleteRoleSuccess (response) {\r\n            console.log(response);\r\n            toastr.success('Deleted the role', 'Delete Role');\r\n            //reload role table\r\n            loadRoleList();\r\n        }\r\n\r\n        function onDeleteRoleError (error) {\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at listing Role');\r\n        }\r\n\r\n        function onUpdateRoleInitiate (item) {\r\n            var requestObj = {\r\n                id: item.id\r\n            };\r\n            roleService.loadRoleDetails(requestObj)\r\n                .then(onLoadRoleDetailsSuccess)\r\n                .catch(onLoadRoleDetailsError);\r\n        }\r\n\r\n        function onLoadRoleDetailsSuccess (response) {\r\n            vm.updateRolePopupData.item = response.items[0];\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/role/create-update/role.create.update.template.html',\r\n                controller: 'RoleUpdateController',\r\n                controllerAs: 'roleDialog',\r\n                size: 'md',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.updateRolePopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(onUpdateRoleSuccess);\r\n        }\r\n\r\n        function onLoadRoleDetailsError (error) {\r\n            console.log(error);\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at loading Role details');\r\n        }\r\n\r\n        function onUpdateRoleSuccess () {\r\n            //update tree\r\n            loadRoleList();\r\n        }\r\n\r\n        function getUpdateRolePopupData () {\r\n            var temp = {\r\n                headingText: 'Update Role',\r\n                confirmText: 'Update',\r\n                cancelText: 'Cancel',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel',\r\n                currentPermissions: [],\r\n                item: null,\r\n                mode: 'update',\r\n                translation: null\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function onCreateRoleInitiate () {\r\n            vm.createRolePopupData.item = {\r\n                name: '',\r\n                description: '',\r\n                privileges: ''\r\n            };\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/role/create-update/role.create.update.template.html',\r\n                controller: 'RoleUpdateController',\r\n                controllerAs: 'roleDialog',\r\n                size: 'md',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.createRolePopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(onCreateRoleSuccess);\r\n        }\r\n\r\n        function onCreateRoleSuccess () {\r\n            //update tree\r\n            loadRoleList();\r\n        }\r\n\r\n        function getCreateRolePopupData () {\r\n            var temp = {\r\n                headingText: 'Create Role',\r\n                confirmText: 'Create',\r\n                cancelText: 'Cancel',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel',\r\n                currentPermissions: [],\r\n                item: null,\r\n                mode: 'create',\r\n                translation: null\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function loadRoleData () {\r\n            var temp = vm.idList\r\n            .split(/\\s*,\\s*/)\r\n            .map(function (item) {\r\n                return parseInt(item.trim(), 10);\r\n            })\r\n            .filter(function (item) {\r\n                return !isNaN(item);\r\n            })\r\n            .join(',');\r\n            vm.searchOptions.createdByUserIds = temp || undefined;\r\n            loadRoleList();\r\n        }\r\n\r\n        function getSearchOptions () {\r\n            var nowDate = new Date();\r\n            var fromDate = new Date(nowDate);\r\n            fromDate.setFullYear(fromDate.getFullYear() - 1);\r\n\r\n            var temp = {\r\n                totalItems: 0,\r\n                page : 1,\r\n                pageSize: 30,\r\n                sortBy: 'name',\r\n                sortOrder: 'A',\r\n                searchText: '',\r\n                createdDateFrom: fromDate,\r\n                createdDateTo: nowDate,\r\n                createdByUserIds: []\r\n            };\r\n            return temp;\r\n        }\r\n\r\n        function getAdvSearchOptions () {\r\n            var temp = {\r\n                isOpen: false,\r\n                dateCreatedFromIsOpen: false,\r\n                dateCreatedToIsOpen: false\r\n            };\r\n            return temp;\r\n        }\r\n\r\n        function populateSidenav (response) {\r\n            vm.itemTree = response;\r\n            vm.selectedFolder = vm.itemTree[0];\r\n        }\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('role.module')\r\n        .factory('roleService', roleService);\r\n\r\n    roleService.$inject = ['$http', 'webServiceURL', 'utils', 'permissions'];\r\n\r\n    function roleService ($http, webServiceURL, utils, permissions) {\r\n        var roleObject = {};\r\n        roleObject.loadRoleList = loadRoleList;\r\n        roleObject.loadRoleDetails = loadRoleDetails;\r\n        roleObject.createRole = createRole;\r\n        roleObject.updateRole = updateRole;\r\n        roleObject.deleteRole = deleteRole;\r\n        roleObject.getPermissionArray = getPermissionArray;\r\n        roleObject.getSidenavItems = getSidenavItems;\r\n        roleObject.getErrorTranslationValue = getErrorTranslationValue;\r\n\r\n        return roleObject;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function loadRoleList (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roleList;\r\n            return $http.get(url, {params: requestObj});\r\n        }\r\n\r\n        function deleteRole (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roledelete;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function createRole (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roleCreate;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function updateRole (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roleUpdate;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function loadRoleDetails (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roleDetails;\r\n            return $http.get(url, requestObj);\r\n        }\r\n\r\n        function getPermissionArray (privileges) {\r\n            var temp = privileges.split(',');\r\n            var returObj = {\r\n                unselected: {},\r\n                selected: {}\r\n            };\r\n            for(var key in permissions){\r\n                if(temp.indexOf(key) < 0){\r\n                    returObj.selected[key] = false;\r\n                }\r\n                else{\r\n                    returObj.unselected[key] = false;\r\n                }\r\n            }\r\n            return returObj;\r\n        }\r\n\r\n        function getSidenavItems () {\r\n            return utils.loadSideMenu('administration');\r\n        }\r\n        \r\n        function getErrorTranslationValue (errorcode) {\r\n            return utils.errorHandler(errorcode);\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('app.core.module')\r\n        .controller('BranchUpdateController', BranchUpdateController);\r\n\r\n    BranchUpdateController.$inject = ['$uibModalInstance', 'dialogData', 'toastr', 'utils', 'branchService'];\r\n\r\n    function BranchUpdateController ($uibModalInstance, dialogData, toastr, utils, branchService) {\r\n        var vm = this;\r\n        vm.activeTab = 0;\r\n        vm.data = dialogData;\r\n        vm.branch = {\r\n            name: dialogData.item.name,\r\n            description: dialogData.item.description\r\n        };\r\n        var permissionList = branchService.getPermissionArray(dialogData.item.privileges);\r\n        var mode = dialogData.mode;\r\n\r\n        vm.unselectedPermissions = permissionList.selected;\r\n        vm.selectedPermissions = permissionList.unselected;\r\n\r\n        vm.validateBranchDetail = validateBranchDetail;\r\n        vm.movePermissions = movePermissions;\r\n        vm.createUpdateBranch = createUpdateBranch;\r\n        vm.nextTab = nextTab;\r\n        vm.cancel = cancel;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function validateBranchDetail () {\r\n            var isValid =  ((vm.branch.name) && (vm.branch.description))? true : false;\r\n            return isValid;\r\n        }\r\n\r\n        function movePermissions (item1, item2, forceMove) {\r\n            if(!Object.keys(item1).length){\r\n                return;\r\n            }\r\n            for(var key in item1){\r\n                if(item1.hasOwnProperty(key)){\r\n                    if(item1[key] || forceMove){\r\n                        item2[key] = false;\r\n                        delete item1[key];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function nextTab () {\r\n            vm.activeTab = 1;\r\n        }\r\n        function cancel () {\r\n            $uibModalInstance.dismiss(vm.data.cancelResult);\r\n        }\r\n\r\n        function createUpdateBranch () {\r\n            if(mode === 'create'){\r\n                createBranch();\r\n            }\r\n            else{\r\n                updateBranch();\r\n            }\r\n        }\r\n\r\n        function createBranch () {\r\n            var privileges = createPermissionString(vm.selectedPermissions);\r\n            var requestObj = {\r\n                name: vm.branch.name,\r\n                description: vm.branch.description,\r\n                privileges: privileges\r\n            };\r\n            console.log(requestObj);\r\n            branchService.createBranch(requestObj)\r\n                .then(onCreateBranchSuccess)\r\n                .catch(onCreateBranchError);\r\n        }\r\n\r\n        function onCreateBranchSuccess () {\r\n            $uibModalInstance.close();\r\n            toastr.success('Success', 'Creating Branch');\r\n        }\r\n\r\n        function onCreateBranchError (error) {\r\n            console.log(error);\r\n            var errorTranslation = branchService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error in creating Branch');\r\n        }\r\n\r\n        function updateBranch () {\r\n            var privileges = createPermissionString(vm.selectedPermissions);\r\n            var requestObj = {\r\n                id: vm.data.item.id,\r\n                name: vm.branch.name,\r\n                description: vm.branch.description,\r\n                privileges: privileges\r\n            };\r\n            console.log(requestObj);\r\n            branchService.updateBranch(requestObj)\r\n                .then(onUpdateBranchSuccess)\r\n                .catch(onUpdateBranchError);\r\n        }\r\n\r\n        function onUpdateBranchSuccess () {\r\n            $uibModalInstance.close();\r\n            toastr.success('Success', 'Updating Branch');\r\n        }\r\n\r\n        function onUpdateBranchError (error) {\r\n            console.log(error);\r\n            var errorTranslation = branchService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error in updating Branch');\r\n        }\r\n\r\n        function createPermissionString (Obj) {\r\n            var privileges = '';\r\n            var temp = [];\r\n            for(var key in Obj){\r\n                if(Obj.hasOwnProperty(key)){\r\n                    temp.push(key);\r\n                }\r\n            }\r\n            if(temp.length){\r\n                privileges = temp.join(',');\r\n            }\r\n            \r\n            return privileges;\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('app.core.module')\r\n        .controller('ModalInstanceCtrl', ModalInstanceCtrl);\r\n\r\n    ModalInstanceCtrl.$inject = ['$uibModalInstance', 'dialogData'];\r\n\r\n    function ModalInstanceCtrl ($uibModalInstance, dialogData) {\r\n        var vm = this;\r\n        vm.data = dialogData;\r\n\r\n        vm.ok = function () {\r\n            $uibModalInstance.close(vm.data.successResult);\r\n        };\r\n\r\n        vm.cancel = function () {\r\n            $uibModalInstance.dismiss(vm.data.cancelResult);\r\n        };\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .directive('branch', branchDirective);\r\n\r\n    branchDirective.$inject = ['$compile', 'jQuery', '$state'];\r\n    function branchDirective ($compile, $, $state) {\r\n        var directiveObject = {\r\n            replace: true,\r\n            restrict: 'E',\r\n            scope: {\r\n                item: '=',\r\n                selectedFolder: '='\r\n            },\r\n            templateUrl: 'js/modules/common/tree/branch.directive.template.html',\r\n            link: branchLink,\r\n            controller: BranchController,\r\n            controllerAs: 'branch',\r\n            bindToController: true\r\n        };\r\n\r\n        BranchController.$inject = ['$scope'];\r\n\r\n        return directiveObject;\r\n\r\n        function branchLink (scope, element, attributes, ctrl) {\r\n            var $element = $(element);\r\n\r\n            ctrl.toggleOpenState = toggleOpenState;\r\n\r\n            if(angular.isArray(scope.branch.item.children)){\r\n                $compile('<tree collection=\"branch.item.children\" selected-folder=\"tree.selectedFolder\"></tree>')(scope, function (cloned) {\r\n                    element.append(cloned);\r\n                });\r\n            }\r\n\r\n            function toggleOpenState (event) {\r\n                event.stopPropagation();\r\n                ctrl.isOpen = !ctrl.isOpen;\r\n                if(ctrl.isOpen){\r\n                    $element.children('.menu-tree').slideDown();\r\n                }\r\n                else{\r\n                    scope.$emit('folderOpened');\r\n                    $element.children('.menu-tree').slideUp();\r\n                }\r\n            }\r\n        }\r\n\r\n        function BranchController ($scope) {\r\n            var vm = this;\r\n            //vm.isActive = false;\r\n            vm.isActive = vm.item === vm.selectedFolder;\r\n            vm.isOpen = false;\r\n            vm.onItemClick = onItemClick;\r\n            vm.hasInnerFolder = checkForInnerFolder();\r\n            //vm.toggleOpenState = toggleOpenState;\r\n            $scope.$on('folderSelectFromExplorer', onFolderSelect);\r\n            $scope.$on('folderOpened', folderOpenedLitener);\r\n\r\n            function onItemClick (item) {\r\n                if(item.hasOwnProperty('sref')){\r\n                    $state.go(item.sref);\r\n                }\r\n                else{\r\n                    $scope.$emit('folderSelectFromTree', item);\r\n                }\r\n            }\r\n\r\n            function onFolderSelect (event, item) {\r\n                if(item === vm.item){\r\n                    vm.isActive = true;\r\n                    vm.isOpen = true;\r\n                    $scope.$emit('folderOpened');\r\n                }\r\n                else{\r\n                    vm.isActive = false;\r\n                }\r\n            }\r\n\r\n            function folderOpenedLitener () {\r\n                //console.log(vm.item.title);\r\n            }\r\n\r\n            function checkForInnerFolder () {\r\n                var hasFolder = false;\r\n                angular.forEach(vm.item.children, function (item) {\r\n                    if(item.type === 'Folder'){\r\n                        hasFolder = true;\r\n                    }\r\n                });\r\n                return hasFolder;\r\n            }\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .directive('slideToggle', slideToggleDirective);\r\n\r\n    slideToggleDirective.$inject = ['jQuery'];\r\n    function slideToggleDirective ($) {\r\n        var directiveObject = {\r\n            restrict: 'A',\r\n            link: slideToggleLink,\r\n        };\r\n\r\n        return directiveObject;\r\n\r\n        function slideToggleLink (scope, element) {\r\n            var $element = $(element);\r\n            element.on('click', function () {\r\n                if($element.hasClass('active')){\r\n                    $element.siblings('.menu-tree').slideDown();\r\n                }\r\n                else{\r\n                    $element.siblings('.menu-tree').slideUp();\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .directive('stopPropagation', stopPropagationDirective);\r\n\r\n    function stopPropagationDirective () {\r\n        var directiveObject = {\r\n            replace: true,\r\n            restrict: 'A',\r\n            scope: {\r\n                collection: '='\r\n            },\r\n            link: stopPropagationLink,\r\n            controller: TreeController,\r\n            controllerAs: 'stopPropagation',\r\n            bindToController: true\r\n        };\r\n\r\n        return directiveObject;\r\n\r\n        function stopPropagationLink (scope, element) {\r\n            element.on('click', function (event) {\r\n                event.stopPropagation();\r\n            });\r\n        }\r\n\r\n        function TreeController () {\r\n            //var vm = this;\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .directive('tree', treeDirective);\r\n\r\n    function treeDirective () {\r\n        var directiveObject = {\r\n            replace: true,\r\n            restrict: 'E',\r\n            scope: {\r\n                collection: '=',\r\n                selectedFolder: '='\r\n            },\r\n            templateUrl: 'js/modules/common/tree/tree.directive.template.html',\r\n            link: treeLink,\r\n            controller: TreeController,\r\n            controllerAs: 'tree',\r\n            bindToController: true\r\n        };\r\n        \r\n        return directiveObject;\r\n\r\n        //function treeLink (scope, element, attributes, ctrl) {\r\n        function treeLink () {\r\n            //console.log(ctrl.collection);\r\n        }\r\n        \r\n        function TreeController () {\r\n            //var vm = this;\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('app.core.module')\r\n        .controller('RoleUpdateController', RoleUpdateController);\r\n\r\n    RoleUpdateController.$inject = ['$uibModalInstance', 'dialogData', 'toastr', 'utils', 'roleService'];\r\n\r\n    function RoleUpdateController ($uibModalInstance, dialogData, toastr, utils, roleService) {\r\n        var vm = this;\r\n        vm.activeTab = 0;\r\n        vm.data = dialogData;\r\n        vm.role = {\r\n            name: dialogData.item.name,\r\n            description: dialogData.item.description\r\n        };\r\n        var permissionList = roleService.getPermissionArray(dialogData.item.privileges);\r\n        var mode = dialogData.mode;\r\n\r\n        vm.unselectedPermissions = permissionList.selected;\r\n        vm.selectedPermissions = permissionList.unselected;\r\n\r\n        vm.validateRoleDetail = validateRoleDetail;\r\n        vm.movePermissions = movePermissions;\r\n        vm.createUpdateRole = createUpdateRole;\r\n        vm.nextTab = nextTab;\r\n        vm.cancel = cancel;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function validateRoleDetail () {\r\n            var isValid =  ((vm.role.name) && (vm.role.description))? true : false;\r\n            return isValid;\r\n        }\r\n\r\n        function movePermissions (item1, item2, forceMove) {\r\n            if(!Object.keys(item1).length){\r\n                return;\r\n            }\r\n            for(var key in item1){\r\n                if(item1.hasOwnProperty(key)){\r\n                    if(item1[key] || forceMove){\r\n                        item2[key] = false;\r\n                        delete item1[key];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function nextTab () {\r\n            vm.activeTab = 1;\r\n        }\r\n        function cancel () {\r\n            $uibModalInstance.dismiss(vm.data.cancelResult);\r\n        }\r\n\r\n        function createUpdateRole () {\r\n            if(mode === 'create'){\r\n                createRole();\r\n            }\r\n            else{\r\n                updateRole();\r\n            }\r\n        }\r\n\r\n        function createRole () {\r\n            var privileges = createPermissionString(vm.selectedPermissions);\r\n            var requestObj = {\r\n                name: vm.role.name,\r\n                description: vm.role.description,\r\n                privileges: privileges\r\n            };\r\n            console.log(requestObj);\r\n            roleService.createRole(requestObj)\r\n                .then(onCreateRoleSuccess)\r\n                .catch(onCreateRoleError);\r\n        }\r\n\r\n        function onCreateRoleSuccess () {\r\n            $uibModalInstance.close();\r\n            toastr.success('Success', 'Creating Role');\r\n        }\r\n\r\n        function onCreateRoleError (error) {\r\n            console.log(error);\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error in creating Role');\r\n        }\r\n\r\n        function updateRole () {\r\n            var privileges = createPermissionString(vm.selectedPermissions);\r\n            var requestObj = {\r\n                id: vm.data.item.id,\r\n                name: vm.role.name,\r\n                description: vm.role.description,\r\n                privileges: privileges\r\n            };\r\n            console.log(requestObj);\r\n            roleService.updateRole(requestObj)\r\n                .then(onUpdateRoleSuccess)\r\n                .catch(onUpdateRoleError);\r\n        }\r\n\r\n        function onUpdateRoleSuccess () {\r\n            $uibModalInstance.close();\r\n            toastr.success('Success', 'Updating Role');\r\n        }\r\n\r\n        function onUpdateRoleError (error) {\r\n            console.log(error);\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error in updating Role');\r\n        }\r\n\r\n        function createPermissionString (Obj) {\r\n            var privileges = '';\r\n            var temp = [];\r\n            for(var key in Obj){\r\n                if(Obj.hasOwnProperty(key)){\r\n                    temp.push(key);\r\n                }\r\n            }\r\n            if(temp.length){\r\n                privileges = temp.join(',');\r\n            }\r\n            \r\n            return privileges;\r\n        }\r\n    }\r\n})();"]}