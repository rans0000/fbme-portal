{"version":3,"sources":["app.core.module.js","app.controller.js","app.core.constants.js","branch/branch.module.js","dashboard/dashboard.module.js","headerArea/headerArea.module.js","login/login.module.js","role/role.module.js","branch/branch.controller.js","branch/branch.service.js","common/user.service.js","common/utils.service.js","dashboard/dashboard.controller.js","dashboard/dashboard.service.js","headerArea/headerArea.controller.js","headerArea/headerArea.service.js","login/login.controller.js","login/login.service.js","role/role.controller.js","role/role.service.js","branch/create-update/branch.create.update.controller.js","common/confirmDialog/confirm.dialog.controller.js","common/tree/branch.directive.js","common/tree/slide.toggle.directive.js","common/tree/stop.propagation.directve.js","common/tree/tree.directive.js","role/create-update/role.create.update.controller.js"],"names":["httpProviderConfiguration","$httpProvider","defaults","headers","post","transformRequest","data","angular","isObject","String","param","obj","name","value","fullSubName","subName","subValue","innerObj","i","query","Array","length","Object","undefined","encodeURIComponent","substr","routerConfiguration","$stateProvider","$urlRouterProvider","otherwise","interceptors","push","state","url","templateUrl","controller","controllerAs","abstract","views","","headerArea@root","httpRequestInterceptor","$q","webServiceURL","interceptResponseSuccess","response","returnValue","config","startsWith","apiBase","header","responseCode","reject","body","interceptResponseError","errObj","status","message","statusText","requestUrl","interceptObject","responseError","jQueryService","jQuery","debugConfiguration","$compileProvider","debugInfoEnabled","module","factory","$inject","AppController","utils","vm","this","css","getCss","getWebServiceURL","temp","login","roleList","roleDetails","roleCreate","roleUpdate","roledelete","getPermissions","PERSONAL_DOCS","ADMIN","COLLABORATION_ADMIN","ROLE_MANAGEMENT","BRANCH_MANAGEMENT","DEPARTMENT_MANAGEMENT","SETTINGS_MANAGEMENT","USER_MANAGEMENT","USER_GROUP_MANAGEMENT","constant","BranchController","branchService","$uibModal","toastr","init","onAllAPISuccess","getSidenavItems","then","populateSidenav","loadBranchList","searchOptions","onLoadBranchListSuccess","catch","onLoadBranchListError","branchList","items","totalItems","totalNumPages","error","errorTranslation","getErrorTranslationValue","onDeleteBranchInitiate","branchItem","deletePopupData","getDeletePopupData","successResult","id","description","modalInstance","open","ariaLabelledBy","ariaDescribedBy","size","resolve","dialogData","result","deleteBranch","headingText","confirmText","cancelText","cancelResult","branchId","requestObj","ids","onDeleteBranchSuccess","onDeleteBranchError","console","log","success","onUpdateBranchInitiate","item","loadBranchDetails","onLoadBranchDetailsSuccess","onLoadBranchDetailsError","updateBranchPopupData","onUpdateBranchSuccess","getUpdateBranchPopupData","currentPermissions","mode","translation","onCreateBranchInitiate","createBranchPopupData","privileges","onCreateBranchSuccess","getCreateBranchPopupData","loadBranchData","idList","split","map","parseInt","trim","filter","isNaN","join","createdByUserIds","getSearchOptions","nowDate","Date","fromDate","setFullYear","getFullYear","page","pageSize","sortBy","sortOrder","searchText","createdDateFrom","createdDateTo","getAdvSearchOptions","isOpen","dateCreatedFromIsOpen","dateCreatedToIsOpen","itemTree","selectedFolder","isExpandedState","advSearch","$http","permissions","get","params","branchdelete","createBranch","branchCreate","updateBranch","branchUpdate","branchDetails","getPermissionArray","returObj","unselected","selected","key","indexOf","loadSideMenu","errorcode","errorHandler","branchObj","userService","saveCurrentUserProfile","userProfile","currentUserProfile","copy","privilegeArray","getAllCurrentUserProfile","getCurrentUserProfile","property","hasOwnProperty","hasPermission","permissionString","isValid","userObj","utilsFactory","$localStorage","getLanguage","lang","setLanguage","setCss","getTranslation","allTranslations","loadTranslation","getLanguagesAvailable","langCode","direction","errorCode","errStr","utilsObj","DashboardController","dashboardService","dashObject","HeaderAreaController","headerAreaService","currentUser","populateCurrentUserObj","headerObj","LoginController","$state","loginService","$scope","selectedLanguage","languagesAvailable","find","onGetTranslationSuccess","onGetTranslationError","cmcm_TranslationLoadError","onLoginSubmit","validateLoginForm","user","requestLogin","onLoginSuccess","onLoginError","go","onLanguageChange","$parent","app","password","userName","loginObj","RoleController","roleService","loadRoleList","onLoadRoleListSuccess","onLoadRoleListError","onDeleteRoleInitiate","roleItem","deleteRole","roleId","onDeleteRoleSuccess","onDeleteRoleError","onUpdateRoleInitiate","loadRoleDetails","onLoadRoleDetailsSuccess","onLoadRoleDetailsError","updateRolePopupData","onUpdateRoleSuccess","getUpdateRolePopupData","onCreateRoleInitiate","createRolePopupData","onCreateRoleSuccess","getCreateRolePopupData","loadRoleData","createRole","updateRole","roleObject","BranchUpdateController","$uibModalInstance","validateBranchDetail","branch","movePermissions","item1","item2","forceMove","keys","nextTab","activeTab","cancel","dismiss","createUpdateBranch","createPermissionString","selectedPermissions","onCreateBranchError","close","onUpdateBranchError","Obj","permissionList","unselectedPermissions","ModalInstanceCtrl","ok","branchDirective","$compile","$","branchLink","scope","element","attributes","ctrl","toggleOpenState","event","stopPropagation","$element","children","slideDown","$emit","slideUp","isArray","cloned","append","onItemClick","sref","onFolderSelect","isActive","folderOpenedLitener","checkForInnerFolder","hasFolder","forEach","type","hasInnerFolder","$on","directiveObject","replace","restrict","link","bindToController","directive","slideToggleDirective","slideToggleLink","on","hasClass","siblings","stopPropagationDirective","stopPropagationLink","TreeController","collection","treeDirective","treeLink","RoleUpdateController","validateRoleDetail","role","createUpdateRole","onCreateRoleError","onUpdateRoleError"],"mappings":"CAIA,WACA,YAqBA,SAAAA,GAAAC,GACAA,EAAAC,SAAAC,QAAAC,KAAA,gBAAA,oCAGAH,EAAAC,SAAAG,kBAAA,SAAAC,GACA,MAAAC,SAAAC,SAAAF,IAAA,kBAAAG,OAAAH,GAAAI,EAAAJ,GAAAA,IAmBA,QAAAI,GAAAC,GACA,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,EAEA,KAAAP,IAAAD,GAGA,GAFAE,EAAAF,EAAAC,GAEAC,YAAAO,OACA,IAAAF,EAAA,EAAAA,EAAAL,EAAAQ,SAAAH,EACAF,EAAAH,EAAAK,GACAJ,EAAAF,EAAA,IAAAM,EAAA,IACAD,KACAA,EAAAH,GAAAE,EACAG,GAAAT,EAAAO,GAAA,QAGA,IAAAJ,YAAAS,QACA,IAAAP,IAAAF,GACAG,EAAAH,EAAAE,GACAD,EAAAF,EAAA,IAAAG,EAAA,IACAE,KACAA,EAAAH,GAAAE,EACAG,GAAAT,EAAAO,GAAA,QAGAM,UAAAV,GAAA,OAAAA,IACAM,GAAAK,mBAAAZ,GAAA,IAAAY,mBAAAX,GAAA,IAIA,OAAAM,GAAAE,OAAAF,EAAAM,OAAA,EAAAN,EAAAE,OAAA,GAAAF,EAIA,QAAAO,GAAAC,EAAAC,EAAA3B,GACA2B,EAAAC,UAAA,UACA5B,EAAA6B,aAAAC,KAAA,0BAEAJ,EACAK,MAAA,SACAC,IAAA,SACAC,YAAA,uCACAC,WAAA,kBACAC,aAAA,UAEAJ,MAAA,QACAK,UAAA,EACAC,OACAC,IACAL,YAAA,oDAEAM,mBACAN,YAAA,iDACAC,WAAA,uBACAC,aAAA,aAaA,QAAAK,GAAAC,EAAAC,GAOA,QAAAC,GAAAC,GACA,GAAAC,GAAAD,CAUA,OATAA,GAAAE,OAAAd,IAAAe,WAAAL,EAAAM,WAGAH,EADAD,EAAAvC,KAAA4C,QAAA,UAAAL,EAAAvC,KAAA4C,OAAAC,aACAT,EAAAU,OAAAP,EAAAvC,MAGAuC,EAAAvC,KAAA+C,KAAAR,EAAAvC,KAAA+C,SAGAP,EAGA,QAAAQ,GAAAT,GACA,GAAAU,IACAL,QACAC,aAAAN,EAAAW,OACAC,QAAAZ,EAAAa,WACAC,WAAAd,EAAAE,OAAAd,KAGA,OAAAS,GAAAU,OAAAG,GA5BA,GAAAK,KAIA,OAFAA,GAAAf,SAAAD,EACAgB,EAAAC,cAAAP,EACAM,EA4BA,QAAAE,KACA,MAAAC,QAIA,QAAAC,GAAAC,GACAA,EAAAC,kBAAA,GApJA3D,QAAA4D,OAAA,mBACA,YACA,eACA,SACA,YACA,oBACA,2BACA,eACA,mBACA,cACA,kBAEApB,OAAA/C,GACA+C,OAAArB,GACAqB,OAAAiB,GACAI,QAAA,yBAAA3B,GACA2B,QAAA,SAAAN,GAEA9D,EAAAqE,SAAA,iBAyDA3C,EAAA2C,SAAA,iBAAA,qBAAA,iBAiCA5B,EAAA4B,SAAA,KAAA,iBAsCAL,EAAAK,SAAA,uBCtJA,WACA,YAMA,SAAAC,GAAAC,GACA,GAAAC,GAAAC,IACAD,GAAAE,IAAAH,EAAAI,SANApE,QAAA4D,OAAA,mBACAhC,WAAA,gBAAAmC,GAEAA,EAAAD,SAAA,YCNA,WACA,YAMA,SAAAO,KACA,GAAAC,IACA5B,QAAA,mCACA6B,MAAA,kBACAC,SAAA,iBACAC,YAAA,oBACAC,WAAA,mBACAC,WAAA,mBACAC,WAAA,mBAEA,OAAAN,GAGA,QAAAO,KACA,GAAAP,IACAQ,cAAA,EACAC,MAAA,EACAC,oBAAA,EACAC,gBAAA,EACAC,kBAAA,GACAC,sBAAA,GACAC,oBAAA,GACAC,gBAAA,IACAC,sBAAA,IAEA,OAAAhB,GA7BAtE,QAAA4D,OAAA,mBACA2B,SAAA,gBAAAlB,KACAkB,SAAA,cAAAV,QCLA,WACA,YAMA,SAAA1D,GAAAC,GACAA,EACAK,MAAA,eACAC,IAAA,UACAC,YAAA,yCACAC,WAAA,mBACAC,aAAA,WAVA7B,QAAA4D,OAAA,oBACApB,OAAArB,GAEAA,EAAA2C,SAAA,qBCNA,WACA,YAMA,SAAA3C,GAAAC,GACAA,EACAK,MAAA,kBACAC,IAAA,aACAC,YAAA,+CACAC,WAAA,sBACAC,aAAA,SAVA7B,QAAA4D,OAAA,uBACApB,OAAArB,GAEAA,EAAA2C,SAAA,qBCNA,WACA,YAEA9D,SAAA4D,OAAA,2BCHA,WACA,YAEA5D,SAAA4D,OAAA,sBCHA,WACA,YAMA,SAAAzC,GAAAC,GACAA,EACAK,MAAA,aACAC,IAAA,QACAC,YAAA,qCACAC,WAAA,iBACAC,aAAA,SAVA7B,QAAA4D,OAAA,kBACApB,OAAArB,GAEAA,EAAA2C,SAAA,qBCNA,WACA,YAOA,SAAA0B,GAAAC,EAAAC,EAAAC,GAsBA,QAAAC,KACAC,IACAJ,EAAAK,kBACAC,KAAAC,GAGA,QAAAH,KACAI,IAGA,QAAAA,KACAR,EAAAQ,eAAAhC,EAAAiC,eACAH,KAAAI,GACAC,MAAAC,GAGA,QAAAF,GAAA7D,GAEA2B,EAAAqC,WAAAhE,EAAAiE,MACAtC,EAAAiC,cAAAM,WAAAlE,EAAAmE,cAGA,QAAAJ,GAAAK,GAEA,GAAAC,GAAAlB,EAAAmB,yBAAAF,EAAA/D,OAAAC,aACA+C,GAAAe,MAAAC,EAAA,2BAGA,QAAAE,GAAAC,GACA7C,EAAA8C,gBAAAC,IACA/C,EAAA8C,gBAAAE,cAAAH,EAAAI,GACAjD,EAAA8C,gBAAAI,YAAA,sCAAAL,EAAAzG,KAAA,IAEA,IAAA+G,GAAA1B,EAAA2B,MACAC,eAAA,cACAC,gBAAA,aACA5F,YAAA,+DACAC,WAAA,oBACAC,aAAA,QACA2F,KAAA,KACAC,SACAC,WAAA,WACA,MAAAzD,GAAA8C,mBAKAK,GAAAO,OAAA5B,KAAA6B,GAGA,QAAAZ,KACA,GAAA1C,IACAuD,YAAA,gBACAC,YAAA,MACAC,WAAA,KACAZ,YAAA,GACAF,cAAA,GACAe,aAAA,SAGA,OAAA1D,GAGA,QAAAsD,GAAAK,GACA,GAAAC,IACAC,KAAAF,GAEAxC,GAAAmC,aAAAM,GACAnC,KAAAqC,GACAhC,MAAAiC,GAGA,QAAAD,GAAA9F,GACAgG,QAAAC,IAAAjG,GACAqD,EAAA6C,QAAA,qBAAA,iBAEAvC,IAGA,QAAAoC,GAAA3B,GACA,GAAAC,GAAAlB,EAAAmB,yBAAAF,EAAA/D,OAAAC,aACA+C,GAAAe,MAAAC,EAAA,2BAGA,QAAA8B,GAAAC,GACA,GAAAR,IACAhB,GAAAwB,EAAAxB,GAEAzB,GAAAkD,kBAAAT,GACAnC,KAAA6C,GACAxC,MAAAyC,GAGA,QAAAD,GAAAtG,GACA2B,EAAA6E,sBAAAJ,KAAApG,EAAAiE,MAAA,EACA,IAAAa,GAAA1B,EAAA2B,MACAC,eAAA,cACAC,gBAAA,aACA5F,YAAA,qEACAC,WAAA,yBACAC,aAAA,eACA2F,KAAA,KACAC,SACAC,WAAA,WACA,MAAAzD,GAAA6E,yBAKA1B,GAAAO,OAAA5B,KAAAgD,GAGA,QAAAF,GAAAnC,GACA4B,QAAAC,IAAA7B,EACA,IAAAC,GAAAlB,EAAAmB,yBAAAF,EAAA/D,OAAAC,aACA+C,GAAAe,MAAAC,EAAA,mCAGA,QAAAoC,KAEA9C,IAGA,QAAA+C,KACA,GAAA1E,IACAuD,YAAA,gBACAC,YAAA,SACAC,WAAA,SACAZ,YAAA,GACAF,cAAA,GACAe,aAAA,SACAiB,sBACAP,KAAA,KACAQ,KAAA,SACAC,YAAA,KAGA,OAAA7E,GAGA,QAAA8E,KACAnF,EAAAoF,sBAAAX,MACArI,KAAA,GACA8G,YAAA,GACAmC,WAAA,GAEA,IAAAlC,GAAA1B,EAAA2B,MACAC,eAAA,cACAC,gBAAA,aACA5F,YAAA,qEACAC,WAAA,yBACAC,aAAA,eACA2F,KAAA,KACAC,SACAC,WAAA,WACA,MAAAzD,GAAAoF,yBAKAjC,GAAAO,OAAA5B,KAAAwD,GAGA,QAAAA,KAEAtD,IAGA,QAAAuD,KACA,GAAAlF,IACAuD,YAAA,gBACAC,YAAA,SACAC,WAAA,SACAZ,YAAA,GACAF,cAAA,GACAe,aAAA,SACAiB,sBACAP,KAAA,KACAQ,KAAA,SACAC,YAAA,KAGA,OAAA7E,GAGA,QAAAmF,KACA,GAAAnF,GAAAL,EAAAyF,OACAC,MAAA,WACAC,IAAA,SAAAlB,GACA,MAAAmB,UAAAnB,EAAAoB,OAAA,MAEAC,OAAA,SAAArB,GACA,OAAAsB,MAAAtB,KAEAuB,KAAA,IACAhG,GAAAiC,cAAAgE,iBAAA5F,GAAAtD,OACAiF,IAGA,QAAAkE,KACA,GAAAC,GAAA,GAAAC,MACAC,EAAA,GAAAD,MAAAD,EACAE,GAAAC,YAAAD,EAAAE,cAAA,EAEA,IAAAlG,IACAkC,WAAA,EACAiE,KAAA,EACAC,SAAA,GACAC,OAAA,OACAC,UAAA,IACAC,WAAA,GACAC,gBAAAR,EACAS,cAAAX,EACAF,oBAEA,OAAA5F,GAGA,QAAA0G,KACA,GAAA1G,IACA2G,QAAA,EACAC,uBAAA,EACAC,qBAAA,EAEA,OAAA7G,GAGA,QAAA0B,GAAA1D,GACA2B,EAAAmH,SAAA9I,EACA2B,EAAAoH,eAAApH,EAAAmH,SAAA,GAzPA,GAAAnH,GAAAC,IACAD,GAAAqC,cACArC,EAAAqH,iBAAA,EACArH,EAAA8C,mBACA9C,EAAA6E,sBAAAE,IACA/E,EAAAoF,sBAAAG,IACAvF,EAAAiC,cAAAiE,IACAlG,EAAAsH,UAAAP,IACA/G,EAAAyF,OAAA,GAEAzF,EAAA4C,uBAAAA,EACA5C,EAAAwE,uBAAAA,EACAxE,EAAAmF,uBAAAA,EACAnF,EAAAwF,eAAAA,EAEA7D,IAtBA5F,QAAA4D,OAAA,iBACAhC,WAAA,mBAAA4D,GAEAA,EAAA1B,SAAA,gBAAA,YAAA,aCNA,WACA,YAMA,SAAA2B,GAAA+F,EAAApJ,EAAA4B,EAAAyH,GAgBA,QAAAxF,GAAAiC,GACA,GAAAxG,GAAAU,EAAAM,QAAAN,EAAAkE,UACA,OAAAkF,GAAAE,IAAAhK,GAAAiK,OAAAzD,IAGA,QAAAN,GAAAM,GACA,GAAAxG,GAAAU,EAAAM,QAAAN,EAAAwJ,YACA,OAAAJ,GAAA3L,KAAA6B,EAAAwG,GAGA,QAAA2D,GAAA3D,GACA,GAAAxG,GAAAU,EAAAM,QAAAN,EAAA0J,YACA,OAAAN,GAAA3L,KAAA6B,EAAAwG,GAGA,QAAA6D,GAAA7D,GACA,GAAAxG,GAAAU,EAAAM,QAAAN,EAAA4J,YACA,OAAAR,GAAA3L,KAAA6B,EAAAwG,GAGA,QAAAS,GAAAT,GACA,GAAAxG,GAAAU,EAAAM,QAAAN,EAAA6J,aACA,OAAAT,GAAAE,IAAAhK,EAAAwG,GAGA,QAAAgE,GAAA5C,GACA,GAAAhF,GAAAgF,EAAAK,MAAA,KACAwC,GACAC,cACAC,YAEA,KAAA,GAAAC,KAAAb,GACAnH,EAAAiI,QAAAD,GAAA,EACAH,EAAAE,SAAAC,IAAA,EAGAH,EAAAC,WAAAE,IAAA,CAGA,OAAAH,GAGA,QAAArG,KACA,MAAA9B,GAAAwI,aAAA,kBAGA,QAAA5F,GAAA6F,GACA,MAAAzI,GAAA0I,aAAAD,GA9DA,GAAAE,KAUA,OATAA,GAAA1G,eAAAA,EACA0G,EAAAhE,kBAAAA,EACAgE,EAAAd,aAAAA,EACAc,EAAAZ,aAAAA,EACAY,EAAA/E,aAAAA,EACA+E,EAAAT,mBAAAA,EACAS,EAAA7G,gBAAAA,EACA6G,EAAA/F,yBAAAA,EAEA+F,EAhBA3M,QAAA4D,OAAA,iBACAC,QAAA,gBAAA4B,GAEAA,EAAA3B,SAAA,QAAA,gBAAA,QAAA,kBCLA,WACA,YAKA,SAAA8I,KAcA,QAAAC,GAAAC,GACAC,EAAA/M,QAAAgN,KAAAF,GACAC,EAAAE,eAAAF,EAAAzD,WAAAK,MAAA,KACAmD,EAAA,KAGA,QAAAI,KACA,MAAAlN,SAAAgN,KAAAD,GAGA,QAAAI,GAAAC,GACA,GAAA9M,EACA,KAAAyM,EAAAM,eAIA,MAAAnK,QAAA,2CAEA,OALA5C,GAAAyM,EAAAK,GAQA,QAAAE,GAAAC,GACA,GAAAC,GAAAT,EAAAE,eAAAV,QAAAgB,MAAA,CACA,OAAAC,GApCA,GACAT,GADAU,IAQA,OALAA,GAAAZ,uBAAAA,EACAY,EAAAP,yBAAAA,EACAO,EAAAN,sBAAAA,EACAM,EAAAH,cAAAA,EAEAG,EAZAzN,QAAA4D,OAAA,mBACAC,QAAA,cAAA+I,MCJA,WACA,YAMA,SAAAc,GAAAvL,EAAAqJ,EAAAmC,GAgBA,QAAAC,KAEA,MADAD,GAAAE,KAAAF,EAAAE,MAAA,QACAF,EAAAE,KAGA,QAAAC,GAAAD,GACAF,EAAAE,KAAAA,EAGA,QAAAzJ,KAEA,MADAuJ,GAAAxJ,IAAAwJ,EAAAxJ,KAAA,UACAwJ,EAAAxJ,IAGA,QAAA4J,GAAA5J,GACAwJ,EAAAxJ,IAAAA,EAGA,QAAA6J,GAAAH,GACA,GAAAvJ,GAAA2J,EAAA9L,EAAAsF,QAAAwG,GAAAC,EAAAL,EACA,OAAAvJ,GAEA,QAAA4J,GAAAL,GACA,GAAAnM,GAAA,sCAAAmM,EAAA,OACA,OAAArC,GAAAE,IAAAhK,GACAqE,KAAA,SAAAzD,GACA,MAAAA,GAAAvC,KAAAoJ,cAEA/C,MAAA,SAAAM,GACA,MAAAvE,GAAAU,OAAA6D,KAIA,QAAAyH,KACA,QACA9N,KAAA,UAAA+N,SAAA,QAAAjK,IAAA,UAAAkK,UAAA,QACAhO,KAAA,eAAA+N,SAAA,KAAAjK,IAAA,UAAAkK,UAAA,QAIA,QAAA3B,GAAA4B,GACA,GAAAC,EACA,QAAAD,GACA,IAAA,QAAAC,EAAA,cAAA,MACA,KAAA,QAAAA,EAAA,0BAAA,MACA,KAAA,QAAAA,EAAA,iBAAA,MACA,KAAA,QAAAA,EAAA,kBAAA,MACA,KAAA,QAAAA,EAAA,yBAAA,MACA,KAAA,QAAAA,EAAA,2BAAA,MACA,KAAA,QAAAA,EAAA,oBAAA,MACA,KAAA,QAAAA,EAAA,yBAAA,MACA,KAAA,QAAAA,EAAA,4BAAA,MACA,KAAA,QAAAA,EAAA,4BAAA,MACA,KAAA,QAAAA,EAAA,wBAAA,MACA,KAAA,QAAAA,EAAA,+BAAA,MACA,KAAA,QAAAA,EAAA,sBAAA,MACA,KAAA,QAAAA,EAAA,uBAAA,MACA,KAAA,QAAAA,EAAA,wBAAA,MACA,KAAA,QAAAA,EAAA,4BAAA,MACA,KAAA,QAAAA,EAAA,0BAAA,MACA,KAAA,QAAAA,EAAA,uBAAA,MACA,KAAA,QAAAA,EAAA,kBAAA,MACA,KAAA,QAAAA,EAAA,mBAAA,MACA,KAAA,QAAAA,EAAA,uBAAA,MACA,KAAA,QAAAA,EAAA,wBAAA,MACA,KAAA,QAAAA,EAAA,4BAAA,MACA,KAAA,QAAAA,EAAA,4BAAA,MACA,KAAA,QAAAA,EAAA,4BAAA,MACA,KAAA,QAAAA,EAAA,4BAAA,MACA,KAAA,QAAAA,EAAA,uBAAA,MACA,KAAA,QAAAA,EAAA,qBAAA,MACA,KAAA,QAAAA,EAAA,yBAAA,MACA,KAAA,QAAAA,EAAA,6BAAA,MACA,KAAA,QAAAA,EAAA,8BAAA,MACA,KAAA,QAAAA,EAAA,4BAAA,MACA,KAAA,QAAAA,EAAA,yBAAA,MACA,KAAA,QAAAA,EAAA,4BAAA,MACA,KAAA,QAAAA,EAAA,kCAAA,MACA,KAAA,QAAAA,EAAA,8BAAA,MACA,KAAA,QAAAA,EAAA,2BAAA,MACA,KAAA,QAAAA,EAAA,0BAAA,MACA,KAAA,QAAAA,EAAA,mBAAA,MACA,SAAAA,EAAA,oBAEA,MAAAA,GAGA,QAAA/B,GAAA5I,GACA,MAAA4H,GAAAE,IAAA,uBACA3F,KAAA,SAAAzD,GACA,GAAAgC,GAAAV,EAAAtB,EAAAvC,KAAA6D,GAAAtB,EAAAvC,IACA,OAAAuE,KAEA8B,MAAA,SAAAM,GACA,MAAAA,KA7GA,GACAuH,GADAO,IAUA,OARAA,GAAAZ,YAAAA,EACAY,EAAAV,YAAAA,EACAU,EAAApK,OAAAA,EACAoK,EAAAT,OAAAA,EACAS,EAAAR,eAAAA,EACAQ,EAAAL,sBAAAA,EACAK,EAAA9B,aAAAA,EACA8B,EAAAhC,aAAAA,EACAgC,EAfAxO,QAAA4D,OAAA,mBACAC,QAAA,QAAA6J,GAEAA,EAAA5J,SAAA,KAAA,QAAA,oBCNA,WACA,YAOA,SAAA2K,KAEA,GAAAxK,GAAAC,IACAD,GAAAhB,QAAA,EARAjD,QAAA4D,OAAA,oBACAhC,WAAA,sBAAA6M,GAEAA,EAAA3K,cCNA,WACA,YAMA,SAAA4K,KACA,GAAAC,KACA,OAAAA,GAPA3O,QAAA4D,OAAA,oBACAC,QAAA,mBAAA6K,GAEAA,EAAA5K,cCLA,WACA,YAOA,SAAA8K,GAAAC,GAUA,QAAAjJ,KACA3B,EAAA6K,YAAAD,EAAAE,yBATA,GAAA9K,GAAAC,IACAD,GAAA6K,eAEAlJ,IAVA5F,QAAA4D,OAAA,qBACAhC,WAAA,uBAAAgN,GAEAA,EAAA9K,SAAA,wBCNA,WACA,YAMA,SAAA+K,GAAAjC,GAQA,QAAAmC,KACA,MAAAnC,GAAAM,2BARA,GAAA8B,KAEA,OADAA,GAAAD,uBAAAA,EACAC,EARAhP,QAAA4D,OAAA,qBACAC,QAAA,oBAAAgL,GAEAA,EAAA/K,SAAA,kBCLA,WACA,YAOA,SAAAmL,GAAAC,EAAAC,EAAAxJ,EAAA3B,EAAAoL,GAmBA,QAAAxJ,KACA,GAAAiI,GAAA7J,EAAA4J,aACA3J,GAAAoL,iBAAApL,EAAAqL,mBAAAC,KAAA,SAAA7G,GACA,MAAAA,GAAA0F,WAAAP,IAEAK,EAAAL,GAGA,QAAAK,GAAAL,GACA7J,EAAAgK,eAAAH,GACA9H,KAAAyJ,GACApJ,MAAAqJ,GAGA,QAAAD,GAAAlN,GAEA2B,EAAAkF,YAAA7G,EAGA,QAAAmN,GAAA/I,GAEAf,EAAAe,MAAAzC,EAAAkF,YAAAuG,2BAGA,QAAAC,KACA,GAAAnC,GAAA2B,EAAAS,kBAAA3L,EAAA4L,KACArC,IACA2B,EAAAW,aAAA7L,EAAA4L,MACA9J,KAAAgK,GACA3J,MAAA4J,GAIA,QAAAD,GAAAzN,GACA6M,EAAAtC,uBAAAvK,EAAAiE,MAAA,IACA2I,EAAAe,GAAA,kBAGA,QAAAD,GAAAtJ,GACA,GAAAC,GAAAwI,EAAAvI,yBAAAF,EAAA/D,OAAAC,aACA+C,GAAAe,MAAAC,EAAA,eAGA,QAAAuJ,KACA,GAAA9B,GAAAnK,EAAAoL,iBAAAjB,QACApK,GAAA8J,YAAAM,GACAF,EAAAE,GACAgB,EAAAe,QAAAC,IAAAjM,IAAAF,EAAAoL,iBAAAlL,IACAH,EAAA+J,OAAA9J,EAAAoL,iBAAAlL,KAjEA,GAAAF,GAAAC,IACAD,GAAA4L,MACAxP,KAAA,GACAgQ,SAAA,IAEApM,EAAAkF,eACAlF,EAAAqL,mBAAAtL,EAAAmK,wBACAlK,EAAAoL,iBAAA,KAEApL,EAAA0L,cAAAA,EACA1L,EAAAiM,iBAAAA,EAEAtK,IAnBA5F,QAAA4D,OAAA,gBACAhC,WAAA,kBAAAqN,GAEAA,EAAAnL,SAAA,SAAA,eAAA,SAAA,QAAA,aCNA,WACA,YAMA,SAAAqL,GAAA3D,EAAApJ,EAAA4B,EAAA4I,GASA,QAAAgD,GAAA1H,GACA,GAAAsF,MAAAtF,EAAA7H,KAAAyJ,SAAA5B,EAAAmI,SAAAvG,OACA,OAAA0D,GAGA,QAAAsC,GAAA5H,GACA,GAAA9H,IACAkQ,SAAApI,EAAA7H,KACAgQ,SAAAnI,EAAAmI,UAEA3O,EAAAU,EAAAM,QAAAN,EAAAmC,KACA,OAAAiH,GAAA3L,KAAA6B,EAAAtB,GAGA,QAAAyM,GAAAC,GACAF,EAAAC,uBAAAC,GAGA,QAAAlG,GAAA6F,GACA,MAAAzI,GAAA0I,aAAAD,GA3BA,GAAA8D,KAMA,OALAA,GAAAX,kBAAAA,EACAW,EAAAT,aAAAA,EACAS,EAAA1D,uBAAAA,EACA0D,EAAA3J,yBAAAA,EAEA2J,EAZAvQ,QAAA4D,OAAA,gBACAC,QAAA,eAAAsL,GAEAA,EAAArL,SAAA,QAAA,gBAAA,QAAA,kBCLA,WACA,YAOA,SAAA0M,GAAAC,EAAA/K,EAAAC,GAwBA,QAAAC,KACAC,IACA4K,EAAA3K,kBACAC,KAAAC,GAGA,QAAAH,KACA6K,IAGA,QAAAA,KACAD,EAAAC,aAAAzM,EAAAiC,eACAH,KAAA4K,GACAvK,MAAAwK,GAGA,QAAAD,GAAArO,GAEA2B,EAAAO,SAAAlC,EAAAiE,MACAtC,EAAAiC,cAAAM,WAAAlE,EAAAmE,cAGA,QAAAmK,GAAAlK,GAEA,GAAAC,GAAA8J,EAAA7J,yBAAAF,EAAA/D,OAAAC,aACA+C,GAAAe,MAAAC,EAAA,yBAGA,QAAAkK,GAAAC,GACA7M,EAAA8C,gBAAAC,IACA/C,EAAA8C,gBAAAE,cAAA6J,EAAA5J,GACAjD,EAAA8C,gBAAAI,YAAA,oCAAA2J,EAAAzQ,KAAA,IAEA,IAAA+G,GAAA1B,EAAA2B,MACAC,eAAA,cACAC,gBAAA,aACA5F,YAAA,+DACAC,WAAA,oBACAC,aAAA,QACA2F,KAAA,KACAC,SACAC,WAAA,WACA,MAAAzD,GAAA8C,mBAKAK,GAAAO,OAAA5B,KAAAgL,GAGA,QAAA/J,KACA,GAAA1C,IACAuD,YAAA,cACAC,YAAA,MACAC,WAAA,KACAZ,YAAA,GACAF,cAAA,GACAe,aAAA,SAGA,OAAA1D,GAGA,QAAAyM,GAAAC,GACA,GAAA9I,IACAC,KAAA6I,GAEAP,GAAAM,WAAA7I,GACAnC,KAAAkL,GACA7K,MAAA8K,GAGA,QAAAD,GAAA3O,GACAgG,QAAAC,IAAAjG,GACAqD,EAAA6C,QAAA,mBAAA,eAEAkI,IAGA,QAAAQ,GAAAxK,GACA,GAAAC,GAAA8J,EAAA7J,yBAAAF,EAAA/D,OAAAC,aACA+C,GAAAe,MAAAC,EAAA,yBAGA,QAAAwK,GAAAzI,GACA,GAAAR,IACAhB,GAAAwB,EAAAxB,GAEAuJ,GAAAW,gBAAAlJ,GACAnC,KAAAsL,GACAjL,MAAAkL,GAGA,QAAAD,GAAA/O,GACA2B,EAAAsN,oBAAA7I,KAAApG,EAAAiE,MAAA,EACA,IAAAa,GAAA1B,EAAA2B,MACAC,eAAA,cACAC,gBAAA,aACA5F,YAAA,iEACAC,WAAA,uBACAC,aAAA,aACA2F,KAAA,KACAC,SACAC,WAAA,WACA,MAAAzD,GAAAsN,uBAKAnK,GAAAO,OAAA5B,KAAAyL,GAGA,QAAAF,GAAA5K,GACA4B,QAAAC,IAAA7B,EACA,IAAAC,GAAA8J,EAAA7J,yBAAAF,EAAA/D,OAAAC,aACA+C,GAAAe,MAAAC,EAAA,iCAGA,QAAA6K,KAEAd,IAGA,QAAAe,KACA,GAAAnN,IACAuD,YAAA,cACAC,YAAA,SACAC,WAAA,SACAZ,YAAA,GACAF,cAAA,GACAe,aAAA,SACAiB,sBACAP,KAAA,KACAQ,KAAA,SACAC,YAAA,KAGA,OAAA7E,GAGA,QAAAoN,KACAzN,EAAA0N,oBAAAjJ,MACArI,KAAA,GACA8G,YAAA,GACAmC,WAAA,GAEA,IAAAlC,GAAA1B,EAAA2B,MACAC,eAAA,cACAC,gBAAA,aACA5F,YAAA,iEACAC,WAAA,uBACAC,aAAA,aACA2F,KAAA,KACAC,SACAC,WAAA,WACA,MAAAzD,GAAA0N,uBAKAvK,GAAAO,OAAA5B,KAAA6L,GAGA,QAAAA,KAEAlB,IAGA,QAAAmB,KACA,GAAAvN,IACAuD,YAAA,cACAC,YAAA,SACAC,WAAA,SACAZ,YAAA,GACAF,cAAA,GACAe,aAAA,SACAiB,sBACAP,KAAA,KACAQ,KAAA,SACAC,YAAA,KAGA,OAAA7E,GAGA,QAAAwN,KACA,GAAAxN,GAAAL,EAAAyF,OACAC,MAAA,WACAC,IAAA,SAAAlB,GACA,MAAAmB,UAAAnB,EAAAoB,OAAA,MAEAC,OAAA,SAAArB,GACA,OAAAsB,MAAAtB,KAEAuB,KAAA,IACAhG,GAAAiC,cAAAgE,iBAAA5F,GAAAtD,OACA0P,IAGA,QAAAvG,KACA,GAAAC,GAAA,GAAAC,MACAC,EAAA,GAAAD,MAAAD,EACAE,GAAAC,YAAAD,EAAAE,cAAA,EAEA,IAAAlG,IACAkC,WAAA,EACAiE,KAAA,EACAC,SAAA,GACAC,OAAA,OACAC,UAAA,IACAC,WAAA,GACAC,gBAAAR,EACAS,cAAAX,EACAF,oBAEA,OAAA5F,GAGA,QAAA0G,KACA,GAAA1G,IACA2G,QAAA,EACAC,uBAAA,EACAC,qBAAA,EAEA,OAAA7G,GAGA,QAAA0B,GAAA1D,GACA2B,EAAAmH,SAAA9I,EACA2B,EAAAoH,eAAApH,EAAAmH,SAAA,GA3PA,GAAAnH,GAAAC,IACAD,GAAAO,YACAP,EAAAqH,iBAAA,EACArH,EAAA8C,mBACA9C,EAAAsN,oBAAAE,IACAxN,EAAA0N,oBAAAE,IAGA5N,EAAAiC,cAAAiE,IACAlG,EAAAsH,UAAAP,IACA/G,EAAAyF,OAAA,GAEAzF,EAAA4M,qBAAAA,EACA5M,EAAAkN,qBAAAA,EACAlN,EAAAyN,qBAAAA,EACAzN,EAAA6N,aAAAA,EAEAlM,IAxBA5F,QAAA4D,OAAA,eACAhC,WAAA,iBAAA4O,GAEAA,EAAA1M,SAAA,cAAA,YAAA,aCNA,WACA,YAMA,SAAA2M,GAAAjF,EAAApJ,EAAA4B,EAAAyH,GAgBA,QAAAiF,GAAAxI,GACA,GAAAxG,GAAAU,EAAAM,QAAAN,EAAAoC,QACA,OAAAgH,GAAAE,IAAAhK,GAAAiK,OAAAzD,IAGA,QAAA6I,GAAA7I,GACA,GAAAxG,GAAAU,EAAAM,QAAAN,EAAAwC,UACA,OAAA4G,GAAA3L,KAAA6B,EAAAwG,GAGA,QAAA6J,GAAA7J,GACA,GAAAxG,GAAAU,EAAAM,QAAAN,EAAAsC,UACA,OAAA8G,GAAA3L,KAAA6B,EAAAwG,GAGA,QAAA8J,GAAA9J,GACA,GAAAxG,GAAAU,EAAAM,QAAAN,EAAAuC,UACA,OAAA6G,GAAA3L,KAAA6B,EAAAwG,GAGA,QAAAkJ,GAAAlJ,GACA,GAAAxG,GAAAU,EAAAM,QAAAN,EAAAqC,WACA,OAAA+G,GAAAE,IAAAhK,EAAAwG,GAGA,QAAAgE,GAAA5C,GACA,GAAAhF,GAAAgF,EAAAK,MAAA,KACAwC,GACAC,cACAC,YAEA,KAAA,GAAAC,KAAAb,GACAnH,EAAAiI,QAAAD,GAAA,EACAH,EAAAE,SAAAC,IAAA,EAGAH,EAAAC,WAAAE,IAAA,CAGA,OAAAH,GAGA,QAAArG,KACA,MAAA9B,GAAAwI,aAAA,kBAGA,QAAA5F,GAAA6F,GACA,MAAAzI,GAAA0I,aAAAD,GA9DA,GAAAwF,KAUA,OATAA,GAAAvB,aAAAA,EACAuB,EAAAb,gBAAAA,EACAa,EAAAF,WAAAA,EACAE,EAAAD,WAAAA,EACAC,EAAAlB,WAAAA,EACAkB,EAAA/F,mBAAAA,EACA+F,EAAAnM,gBAAAA,EACAmM,EAAArL,yBAAAA,EAEAqL,EAhBAjS,QAAA4D,OAAA,eACAC,QAAA,cAAA4M,GAEAA,EAAA3M,SAAA,QAAA,gBAAA,QAAA,kBCLA,WACA,YAMA,SAAAoO,GAAAC,EAAAzK,EAAA/B,EAAA3B,EAAAyB,GAuBA,QAAA2M,KACA,GAAA5E,MAAAvJ,EAAAoO,OAAA,OAAApO,EAAAoO,OAAA,YACA,OAAA7E,GAGA,QAAA8E,GAAAC,EAAAC,EAAAC,GACA,GAAA1R,OAAA2R,KAAAH,GAAAzR,OAGA,IAAA,GAAAwL,KAAAiG,GACAA,EAAAlF,eAAAf,KACAiG,EAAAjG,IAAAmG,KACAD,EAAAlG,IAAA,QACAiG,GAAAjG,IAMA,QAAAqG,KACA1O,EAAA2O,UAAA,EAEA,QAAAC,KACAV,EAAAW,QAAA7O,EAAAlE,KAAAiI,cAGA,QAAA+K,KACA,WAAA7J,EACA2C,IAGAE,IAIA,QAAAF,KACA,GAAAvC,GAAA0J,EAAA/O,EAAAgP,qBACA/K,GACA7H,KAAA4D,EAAAoO,OAAAhS,KACA8G,YAAAlD,EAAAoO,OAAAlL,YACAmC,WAAAA,EAEAhB,SAAAC,IAAAL,GACAzC,EAAAoG,aAAA3D,GACAnC,KAAAwD,GACAnD,MAAA8M,GAGA,QAAA3J,KACA4I,EAAAgB,QACAxN,EAAA6C,QAAA,UAAA,mBAGA,QAAA0K,GAAAxM,GACA4B,QAAAC,IAAA7B,EACA,IAAAC,GAAAlB,EAAAmB,yBAAAF,EAAA/D,OAAAC,aACA+C,GAAAe,MAAAC,EAAA,4BAGA,QAAAoF,KACA,GAAAzC,GAAA0J,EAAA/O,EAAAgP,qBACA/K,GACAhB,GAAAjD,EAAAlE,KAAA2I,KAAAxB,GACA7G,KAAA4D,EAAAoO,OAAAhS,KACA8G,YAAAlD,EAAAoO,OAAAlL,YACAmC,WAAAA,EAEAhB,SAAAC,IAAAL,GACAzC,EAAAsG,aAAA7D,GACAnC,KAAAgD,GACA3C,MAAAgN,GAGA,QAAArK,KACAoJ,EAAAgB,QACAxN,EAAA6C,QAAA,UAAA,mBAGA,QAAA4K,GAAA1M,GACA4B,QAAAC,IAAA7B,EACA,IAAAC,GAAAlB,EAAAmB,yBAAAF,EAAA/D,OAAAC,aACA+C,GAAAe,MAAAC,EAAA,4BAGA,QAAAqM,GAAAK,GACA,GAAA/J,GAAA,GACAhF,IACA,KAAA,GAAAgI,KAAA+G,GACAA,EAAAhG,eAAAf,IACAhI,EAAA9C,KAAA8K,EAOA,OAJAhI,GAAAxD,SACAwI,EAAAhF,EAAA2F,KAAA,MAGAX,EAtHA,GAAArF,GAAAC,IACAD,GAAA2O,UAAA,EACA3O,EAAAlE,KAAA2H,EACAzD,EAAAoO,QACAhS,KAAAqH,EAAAgB,KAAArI,KACA8G,YAAAO,EAAAgB,KAAAvB,YAEA,IAAAmM,GAAA7N,EAAAyG,mBAAAxE,EAAAgB,KAAAY,YACAJ,EAAAxB,EAAAwB,IAEAjF,GAAAsP,sBAAAD,EAAAjH,SACApI,EAAAgP,oBAAAK,EAAAlH,WAEAnI,EAAAmO,qBAAAA,EACAnO,EAAAqO,gBAAAA,EACArO,EAAA8O,mBAAAA,EACA9O,EAAA0O,QAAAA,EACA1O,EAAA4O,OAAAA,EAvBA7S,QAAA4D,OAAA,mBACAhC,WAAA,yBAAAsQ,GAEAA,EAAApO,SAAA,oBAAA,aAAA,SAAA,QAAA,oBCLA,WACA,YAMA,SAAA0P,GAAArB,EAAAzK,GACA,GAAAzD,GAAAC,IACAD,GAAAlE,KAAA2H,EAEAzD,EAAAwP,GAAA,WACAtB,EAAAgB,MAAAlP,EAAAlE,KAAAkH,gBAGAhD,EAAA4O,OAAA,WACAV,EAAAW,QAAA7O,EAAAlE,KAAAiI,eAdAhI,QAAA4D,OAAA,mBACAhC,WAAA,oBAAA4R,GAEAA,EAAA1P,SAAA,oBAAA,iBCLA,WACA,YAMA,SAAA4P,GAAAC,EAAAC,EAAA1E,GAmBA,QAAA2E,GAAAC,EAAAC,EAAAC,EAAAC,GAWA,QAAAC,GAAAC,GACAA,EAAAC,kBACAH,EAAAhJ,QAAAgJ,EAAAhJ,OACAgJ,EAAAhJ,OACAoJ,EAAAC,SAAA,cAAAC,aAGAT,EAAAU,MAAA,gBACAH,EAAAC,SAAA,cAAAG,WAlBA,GAAAJ,GAAAT,EAAAG,EAEAE,GAAAC,gBAAAA,EAEAlU,QAAA0U,QAAAZ,EAAAzB,OAAA3J,KAAA4L,WACAX,EAAA,yFAAAG,EAAA,SAAAa,GACAZ,EAAAa,OAAAD,KAiBA,QAAAnP,GAAA4J,GAWA,QAAAyF,GAAAnM,GACAA,EAAA2E,eAAA,QACA6B,EAAAe,GAAAvH,EAAAoM,MAGA1F,EAAAoF,MAAA,uBAAA9L,GAIA,QAAAqM,GAAAZ,EAAAzL,GACAA,IAAAzE,EAAAyE,MACAzE,EAAA+Q,UAAA,EACA/Q,EAAAgH,QAAA,EACAmE,EAAAoF,MAAA,iBAGAvQ,EAAA+Q,UAAA,EAIA,QAAAC,MAIA,QAAAC,KACA,GAAAC,IAAA,CAMA,OALAnV,SAAAoV,QAAAnR,EAAAyE,KAAA4L,SAAA,SAAA5L,GACA,WAAAA,EAAA2M,OACAF,GAAA,KAGAA,EAzCA,GAAAlR,GAAAC,IAEAD,GAAA+Q,SAAA/Q,EAAAyE,OAAAzE,EAAAoH,eACApH,EAAAgH,QAAA,EACAhH,EAAA4Q,YAAAA,EACA5Q,EAAAqR,eAAAJ,IAEA9F,EAAAmG,IAAA,2BAAAR,GACA3F,EAAAmG,IAAA,eAAAN,GAnDA,GAAAO,IACAC,SAAA,EACAC,SAAA,IACA5B,OACApL,KAAA,IACA2C,eAAA,KAEA1J,YAAA,wDACAgU,KAAA9B,EACAjS,WAAA4D,EACA3D,aAAA,SACA+T,kBAAA,EAKA,OAFApQ,GAAA1B,SAAA,UAEA0R,EArBAxV,QAAA4D,OAAA,mBACAiS,UAAA,SAAAnC,GAEAA,EAAA5P,SAAA,WAAA,SAAA,aCNA,WACA,YAMA,SAAAgS,GAAAlC,GAQA,QAAAmC,GAAAjC,EAAAC,GACA,GAAAM,GAAAT,EAAAG,EACAA,GAAAiC,GAAA,QAAA,WACA3B,EAAA4B,SAAA,UACA5B,EAAA6B,SAAA,cAAA3B,YAGAF,EAAA6B,SAAA,cAAAzB,YAdA,GAAAe,IACAE,SAAA,IACAC,KAAAI,EAGA,OAAAP,GAVAxV,QAAA4D,OAAA,mBACAiS,UAAA,cAAAC,GAEAA,EAAAhS,SAAA,aCNA,WACA,YAKA,SAAAqS,KAeA,QAAAC,GAAAtC,EAAAC,GACAA,EAAAiC,GAAA,QAAA,SAAA7B,GACAA,EAAAC,oBAIA,QAAAiC,MApBA,GAAAb,IACAC,SAAA,EACAC,SAAA,IACA5B,OACAwC,WAAA,KAEAX,KAAAS,EACAxU,WAAAyU,EACAxU,aAAA,kBACA+T,kBAAA,EAGA,OAAAJ,GAhBAxV,QAAA4D,OAAA,mBACAiS,UAAA,kBAAAM,MCJA,WACA,YAKA,SAAAI,KAkBA,QAAAC,MAIA,QAAAH,MArBA,GAAAb,IACAC,SAAA,EACAC,SAAA,IACA5B,OACAwC,WAAA,IACAjL,eAAA,KAEA1J,YAAA,sDACAgU,KAAAa,EACA5U,WAAAyU,EACAxU,aAAA,OACA+T,kBAAA,EAGA,OAAAJ,GAlBAxV,QAAA4D,OAAA,mBACAiS,UAAA,OAAAU,MCJA,WACA,YAMA,SAAAE,GAAAtE,EAAAzK,EAAA/B,EAAA3B,EAAAyM,GAuBA,QAAAiG,KACA,GAAAlJ,MAAAvJ,EAAA0S,KAAA,OAAA1S,EAAA0S,KAAA,YACA,OAAAnJ,GAGA,QAAA8E,GAAAC,EAAAC,EAAAC,GACA,GAAA1R,OAAA2R,KAAAH,GAAAzR,OAGA,IAAA,GAAAwL,KAAAiG,GACAA,EAAAlF,eAAAf,KACAiG,EAAAjG,IAAAmG,KACAD,EAAAlG,IAAA,QACAiG,GAAAjG,IAMA,QAAAqG,KACA1O,EAAA2O,UAAA,EAEA,QAAAC,KACAV,EAAAW,QAAA7O,EAAAlE,KAAAiI,cAGA,QAAA4O,KACA,WAAA1N,EACA6I,IAGAC,IAIA,QAAAD,KACA,GAAAzI,GAAA0J,EAAA/O,EAAAgP,qBACA/K,GACA7H,KAAA4D,EAAA0S,KAAAtW,KACA8G,YAAAlD,EAAA0S,KAAAxP,YACAmC,WAAAA,EAEAhB,SAAAC,IAAAL,GACAuI,EAAAsB,WAAA7J,GACAnC,KAAA6L,GACAxL,MAAAyQ,GAGA,QAAAjF,KACAO,EAAAgB,QACAxN,EAAA6C,QAAA,UAAA,iBAGA,QAAAqO,GAAAnQ,GACA4B,QAAAC,IAAA7B,EACA,IAAAC,GAAA8J,EAAA7J,yBAAAF,EAAA/D,OAAAC,aACA+C,GAAAe,MAAAC,EAAA,0BAGA,QAAAqL,KACA,GAAA1I,GAAA0J,EAAA/O,EAAAgP,qBACA/K,GACAhB,GAAAjD,EAAAlE,KAAA2I,KAAAxB,GACA7G,KAAA4D,EAAA0S,KAAAtW,KACA8G,YAAAlD,EAAA0S,KAAAxP,YACAmC,WAAAA,EAEAhB,SAAAC,IAAAL,GACAuI,EAAAuB,WAAA9J,GACAnC,KAAAyL,GACApL,MAAA0Q,GAGA,QAAAtF,KACAW,EAAAgB,QACAxN,EAAA6C,QAAA,UAAA,iBAGA,QAAAsO,GAAApQ,GACA4B,QAAAC,IAAA7B,EACA,IAAAC,GAAA8J,EAAA7J,yBAAAF,EAAA/D,OAAAC,aACA+C,GAAAe,MAAAC,EAAA,0BAGA,QAAAqM,GAAAK,GACA,GAAA/J,GAAA,GACAhF,IACA,KAAA,GAAAgI,KAAA+G,GACAA,EAAAhG,eAAAf,IACAhI,EAAA9C,KAAA8K,EAOA,OAJAhI,GAAAxD,SACAwI,EAAAhF,EAAA2F,KAAA,MAGAX,EAtHA,GAAArF,GAAAC,IACAD,GAAA2O,UAAA,EACA3O,EAAAlE,KAAA2H,EACAzD,EAAA0S,MACAtW,KAAAqH,EAAAgB,KAAArI,KACA8G,YAAAO,EAAAgB,KAAAvB,YAEA,IAAAmM,GAAA7C,EAAAvE,mBAAAxE,EAAAgB,KAAAY,YACAJ,EAAAxB,EAAAwB,IAEAjF,GAAAsP,sBAAAD,EAAAjH,SACApI,EAAAgP,oBAAAK,EAAAlH,WAEAnI,EAAAyS,mBAAAA,EACAzS,EAAAqO,gBAAAA,EACArO,EAAA2S,iBAAAA,EACA3S,EAAA0O,QAAAA,EACA1O,EAAA4O,OAAAA,EAvBA7S,QAAA4D,OAAA,mBACAhC,WAAA,uBAAA6U,GAEAA,EAAA3S,SAAA,oBAAA,aAAA,SAAA,QAAA","file":"main.min.js","sourcesContent":["/*jshint browser: true*/\r\n/*global angular: true*/\r\n/*global jQuery: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module', [\r\n        'ui.router',\r\n        'ui.bootstrap',\r\n        'toastr',\r\n        'ngStorage',\r\n        'headerArea.module',\r\n        'ui.bootstrap.contextMenu',\r\n        'login.module',\r\n        'dashboard.module',\r\n        'role.module',\r\n        'branch.module'\r\n    ])\r\n        .config(httpProviderConfiguration)\r\n        .config(routerConfiguration)\r\n        .config(debugConfiguration)\r\n        .factory('httpRequestInterceptor', httpRequestInterceptor)\r\n        .factory('jQuery', jQueryService);\r\n\r\n    httpProviderConfiguration.$inject = ['$httpProvider'];\r\n    function httpProviderConfiguration ($httpProvider) {\r\n        $httpProvider.defaults.headers.post[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\r\n        //$httpProvider.defaults.paramSerializer = '$httpParamSerializerJQLike';\r\n\r\n        $httpProvider.defaults.transformRequest = [function(data) {\r\n            return angular.isObject(data) && String(data) !== '[object File]' ? param(data) : data;\r\n        }];\r\n\r\n        /*$httpProvider.defaults.transformRequest.unshift(function (data, headersGetter) {\r\n            var key, result = [];\r\n\r\n            if (typeof data === \"string\"){\r\n                return data;\r\n            }\r\n\r\n            for (key in data) {\r\n                if (data.hasOwnProperty(key)){\r\n                    result.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]));\r\n                }\r\n            }\r\n            return result.join(\"&\");\r\n        });*/\r\n    }\r\n\r\n    function param(obj) {\r\n        var query = '', name, value, fullSubName, subName, subValue, innerObj, i;\r\n\r\n        for(name in obj) {\r\n            value = obj[name];\r\n\r\n            if(value instanceof Array) {\r\n                for(i=0; i<value.length; ++i) {\r\n                    subValue = value[i];\r\n                    fullSubName = name + '[' + i + ']';\r\n                    innerObj = {};\r\n                    innerObj[fullSubName] = subValue;\r\n                    query += param(innerObj) + '&';\r\n                }\r\n            }\r\n            else if(value instanceof Object) {\r\n                for(subName in value) {\r\n                    subValue = value[subName];\r\n                    fullSubName = name + '[' + subName + ']';\r\n                    innerObj = {};\r\n                    innerObj[fullSubName] = subValue;\r\n                    query += param(innerObj) + '&';\r\n                }\r\n            }\r\n            else if(value !== undefined && value !== null){\r\n                query += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';\r\n            }\r\n        }\r\n\r\n        return query.length ? query.substr(0, query.length - 1) : query;\r\n    }\r\n\r\n    routerConfiguration.$inject = ['$stateProvider', '$urlRouterProvider', '$httpProvider'];\r\n    function routerConfiguration ($stateProvider, $urlRouterProvider, $httpProvider) {\r\n        $urlRouterProvider.otherwise('/login');\r\n        $httpProvider.interceptors.push('httpRequestInterceptor');\r\n\r\n        $stateProvider\r\n            .state('login', {\r\n            url: '/login',\r\n            templateUrl: 'js/modules/login/login.template.html',\r\n            controller: 'LoginController',\r\n            controllerAs: 'login'\r\n        })\r\n            .state('root', {\r\n            abstract: true,\r\n            views: {\r\n                '': {\r\n                    templateUrl: 'js/modules/contentArea/contentArea.template.html'\r\n                },\r\n                'headerArea@root': {\r\n                    templateUrl: 'js/modules/headerArea/headerArea.template.html',\r\n                    controller: 'HeaderAreaController',\r\n                    controllerAs: 'header'\r\n                }\r\n            }\r\n        })/*\r\n            .state('dashboard', {\r\n            url: '/dashboard',\r\n            templateUrl: 'js/modules/dashboard/dashboard.template.html',\r\n            controller: 'DashboardController',\r\n            controllerAs: 'vm'\r\n        })*/;\r\n    }\r\n\r\n    httpRequestInterceptor.$inject = ['$q', 'webServiceURL'];\r\n    function httpRequestInterceptor ($q, webServiceURL) {\r\n        var interceptObject = {};\r\n        //interceptObject.request = interceptRequest;\r\n        interceptObject.response = interceptResponseSuccess;\r\n        interceptObject.responseError = interceptResponseError;\r\n        return interceptObject;\r\n\r\n        function interceptResponseSuccess (response) {\r\n            var returnValue = response;\r\n            if(response.config.url.startsWith(webServiceURL.apiBase)){\r\n                //response.data.header.responseCode is FD200 for success\r\n                if(response.data.header && response.data.header.responseCode !== 'FD200'){\r\n                    returnValue = $q.reject(response.data);\r\n                }\r\n                else{\r\n                    returnValue = response.data.body? response.data.body : {};\r\n                }\r\n            }\r\n            return returnValue;\r\n        }\r\n\r\n        function interceptResponseError (response) {\r\n            var errObj = {\r\n                header: {\r\n                    responseCode: response.status,\r\n                    message: response.statusText,\r\n                    requestUrl: response.config.url\r\n                }\r\n            };\r\n            return $q.reject(errObj);\r\n        }\r\n    }\r\n\r\n    function jQueryService () {\r\n        return jQuery;\r\n    }\r\n\r\n    debugConfiguration.$inject = ['$compileProvider'];\r\n    function debugConfiguration ($compileProvider) {\r\n        $compileProvider.debugInfoEnabled(false);\r\n    }\r\n\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .controller('AppController', AppController);\r\n\r\n    AppController.$inject = ['utils'];\r\n    function AppController (utils) {\r\n        var vm = this;\r\n        vm.css = utils.getCss();\r\n    }\r\n\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .constant('webServiceURL', getWebServiceURL())\r\n        .constant('permissions', getPermissions());\r\n\r\n    function getWebServiceURL () {\r\n        var temp = {\r\n            apiBase: 'http://localhost:8080/FDocs/api/',\r\n            login: 'auth/login.json',\r\n            roleList: 'role/list.json',\r\n            roleDetails: 'role/details.json',\r\n            roleCreate: 'role/create.json',\r\n            roleUpdate: 'role/update.json',\r\n            roledelete: 'role/delete.json'\r\n        };\r\n        return temp;\r\n    }\r\n\r\n    function getPermissions () {\r\n        var temp = {\r\n            PERSONAL_DOCS: 1,\r\n            ADMIN: 2,\r\n            COLLABORATION_ADMIN: 4,\r\n            ROLE_MANAGEMENT: 8,\r\n            BRANCH_MANAGEMENT: 16,\r\n            DEPARTMENT_MANAGEMENT: 32,\r\n            SETTINGS_MANAGEMENT: 64,\r\n            USER_MANAGEMENT: 128,\r\n            USER_GROUP_MANAGEMENT: 256\r\n        };\r\n        return temp;\r\n    }\r\n\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('branch.module', [])\r\n        .config(routerConfiguration);\r\n\r\n    routerConfiguration.$inject = ['$stateProvider'];\r\n    function routerConfiguration ($stateProvider) {\r\n        $stateProvider\r\n            .state('root.branch', {\r\n            url: '/branch',\r\n            templateUrl: 'js/modules/branch/branch.template.html',\r\n            controller: 'BranchController',\r\n            controllerAs: 'branch'\r\n        });\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('dashboard.module', [])\r\n        .config(routerConfiguration);\r\n\r\n    routerConfiguration.$inject = ['$stateProvider'];\r\n    function routerConfiguration ($stateProvider) {\r\n        $stateProvider\r\n            .state('root.dashboard', {\r\n            url: '/dashboard',\r\n            templateUrl: 'js/modules/dashboard/dashboard.template.html',\r\n            controller: 'DashboardController',\r\n            controllerAs: 'dash'\r\n        });\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('headerArea.module', []);\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('login.module', []);\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('role.module', [])\r\n        .config(routerConfiguration);\r\n\r\n    routerConfiguration.$inject = ['$stateProvider'];\r\n    function routerConfiguration ($stateProvider) {\r\n        $stateProvider\r\n            .state('root.role', {\r\n            url: '/role',\r\n            templateUrl: 'js/modules/role/role.template.html',\r\n            controller: 'RoleController',\r\n            controllerAs: 'role'\r\n        });\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('branch.module')\r\n        .controller('BranchController', BranchController);\r\n\r\n    BranchController.$inject = ['branchService', '$uibModal', 'toastr'];\r\n\r\n    function BranchController (branchService, $uibModal, toastr) {\r\n\r\n        var vm = this;\r\n        vm.branchList = [];\r\n        vm.isExpandedState = true;\r\n        vm.deletePopupData = {};\r\n        vm.updateBranchPopupData = getUpdateBranchPopupData();\r\n        vm.createBranchPopupData = getCreateBranchPopupData();\r\n        vm.searchOptions = getSearchOptions();\r\n        vm.advSearch = getAdvSearchOptions();\r\n        vm.idList = '';\r\n\r\n        vm.onDeleteBranchInitiate = onDeleteBranchInitiate;\r\n        vm.onUpdateBranchInitiate = onUpdateBranchInitiate;\r\n        vm.onCreateBranchInitiate = onCreateBranchInitiate;\r\n        vm.loadBranchData = loadBranchData;\r\n\r\n        init();\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function init () {\r\n            onAllAPISuccess();\r\n            branchService.getSidenavItems()\r\n                .then(populateSidenav);\r\n        }\r\n\r\n        function onAllAPISuccess () {\r\n            loadBranchList();\r\n        }\r\n\r\n        function loadBranchList () {\r\n            branchService.loadBranchList(vm.searchOptions)\r\n                .then(onLoadBranchListSuccess)\r\n                .catch(onLoadBranchListError);\r\n        }\r\n\r\n        function onLoadBranchListSuccess (response) {\r\n            //console.log(response);\r\n            vm.branchList = response.items;\r\n            vm.searchOptions.totalItems = response.totalNumPages;\r\n        }\r\n\r\n        function onLoadBranchListError (error) {\r\n            //console.log(error);\r\n            var errorTranslation = branchService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at listing Branch');\r\n        }\r\n\r\n        function onDeleteBranchInitiate (branchItem) {\r\n            vm.deletePopupData = getDeletePopupData();\r\n            vm.deletePopupData.successResult = branchItem.id;\r\n            vm.deletePopupData.description = 'Do you want to delete this branch (' + branchItem.name + ')?';\r\n\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/common/confirmDialog/confirm.dialog.template.html',\r\n                controller: 'ModalInstanceCtrl',\r\n                controllerAs: '$ctrl',\r\n                size: 'sm',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.deletePopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(deleteBranch);\r\n        }\r\n\r\n        function getDeletePopupData () {\r\n            var temp = {\r\n                headingText: 'Delete Branch',\r\n                confirmText: 'Yes',\r\n                cancelText: 'No',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel'\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function deleteBranch (branchId) {\r\n            var requestObj = {\r\n                ids: [branchId]\r\n            };\r\n            branchService.deleteBranch(requestObj)\r\n                .then(onDeleteBranchSuccess)\r\n                .catch(onDeleteBranchError);\r\n        }\r\n\r\n        function onDeleteBranchSuccess (response) {\r\n            console.log(response);\r\n            toastr.success('Deleted the branch', 'Delete Branch');\r\n            //reload branch table\r\n            loadBranchList();\r\n        }\r\n\r\n        function onDeleteBranchError (error) {\r\n            var errorTranslation = branchService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at listing Branch');\r\n        }\r\n\r\n        function onUpdateBranchInitiate (item) {\r\n            var requestObj = {\r\n                id: item.id\r\n            };\r\n            branchService.loadBranchDetails(requestObj)\r\n                .then(onLoadBranchDetailsSuccess)\r\n                .catch(onLoadBranchDetailsError);\r\n        }\r\n\r\n        function onLoadBranchDetailsSuccess (response) {\r\n            vm.updateBranchPopupData.item = response.items[0];\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/branch/create-update/branch.create.update.template.html',\r\n                controller: 'BranchUpdateController',\r\n                controllerAs: 'branchDialog',\r\n                size: 'md',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.updateBranchPopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(onUpdateBranchSuccess);\r\n        }\r\n\r\n        function onLoadBranchDetailsError (error) {\r\n            console.log(error);\r\n            var errorTranslation = branchService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at loading Branch details');\r\n        }\r\n\r\n        function onUpdateBranchSuccess () {\r\n            //update tree\r\n            loadBranchList();\r\n        }\r\n\r\n        function getUpdateBranchPopupData () {\r\n            var temp = {\r\n                headingText: 'Update Branch',\r\n                confirmText: 'Update',\r\n                cancelText: 'Cancel',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel',\r\n                currentPermissions: [],\r\n                item: null,\r\n                mode: 'update',\r\n                translation: null\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function onCreateBranchInitiate () {\r\n            vm.createBranchPopupData.item = {\r\n                name: '',\r\n                description: '',\r\n                privileges: ''\r\n            };\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/branch/create-update/branch.create.update.template.html',\r\n                controller: 'BranchUpdateController',\r\n                controllerAs: 'branchDialog',\r\n                size: 'md',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.createBranchPopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(onCreateBranchSuccess);\r\n        }\r\n\r\n        function onCreateBranchSuccess () {\r\n            //update tree\r\n            loadBranchList();\r\n        }\r\n\r\n        function getCreateBranchPopupData () {\r\n            var temp = {\r\n                headingText: 'Create Branch',\r\n                confirmText: 'Create',\r\n                cancelText: 'Cancel',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel',\r\n                currentPermissions: [],\r\n                item: null,\r\n                mode: 'create',\r\n                translation: null\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function loadBranchData () {\r\n            var temp = vm.idList\r\n            .split(/\\s*,\\s*/)\r\n            .map(function (item) {\r\n                return parseInt(item.trim(), 10);\r\n            })\r\n            .filter(function (item) {\r\n                return !isNaN(item);\r\n            })\r\n            .join(',');\r\n            vm.searchOptions.createdByUserIds = temp || undefined;\r\n            loadBranchList();\r\n        }\r\n\r\n        function getSearchOptions () {\r\n            var nowDate = new Date();\r\n            var fromDate = new Date(nowDate);\r\n            fromDate.setFullYear(fromDate.getFullYear() - 1);\r\n\r\n            var temp = {\r\n                totalItems: 0,\r\n                page : 1,\r\n                pageSize: 30,\r\n                sortBy: 'name',\r\n                sortOrder: 'A',\r\n                searchText: '',\r\n                createdDateFrom: fromDate,\r\n                createdDateTo: nowDate,\r\n                createdByUserIds: []\r\n            };\r\n            return temp;\r\n        }\r\n\r\n        function getAdvSearchOptions () {\r\n            var temp = {\r\n                isOpen: false,\r\n                dateCreatedFromIsOpen: false,\r\n                dateCreatedToIsOpen: false\r\n            };\r\n            return temp;\r\n        }\r\n\r\n        function populateSidenav (response) {\r\n            vm.itemTree = response;\r\n            vm.selectedFolder = vm.itemTree[0];\r\n        }\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('branch.module')\r\n        .factory('branchService', branchService);\r\n\r\n    branchService.$inject = ['$http', 'webServiceURL', 'utils', 'permissions'];\r\n\r\n    function branchService ($http, webServiceURL, utils, permissions) {\r\n        var branchObj = {};\r\n        branchObj.loadBranchList = loadBranchList;\r\n        branchObj.loadBranchDetails = loadBranchDetails;\r\n        branchObj.createBranch = createBranch;\r\n        branchObj.updateBranch = updateBranch;\r\n        branchObj.deleteBranch = deleteBranch;\r\n        branchObj.getPermissionArray = getPermissionArray;\r\n        branchObj.getSidenavItems = getSidenavItems;\r\n        branchObj.getErrorTranslationValue = getErrorTranslationValue;\r\n\r\n        return branchObj;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function loadBranchList (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.branchList;\r\n            return $http.get(url, {params: requestObj});\r\n        }\r\n\r\n        function deleteBranch (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.branchdelete;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function createBranch (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.branchCreate;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function updateBranch (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.branchUpdate;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function loadBranchDetails (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.branchDetails;\r\n            return $http.get(url, requestObj);\r\n        }\r\n\r\n        function getPermissionArray (privileges) {\r\n            var temp = privileges.split(',');\r\n            var returObj = {\r\n                unselected: {},\r\n                selected: {}\r\n            };\r\n            for(var key in permissions){\r\n                if(temp.indexOf(key) < 0){\r\n                    returObj.selected[key] = false;\r\n                }\r\n                else{\r\n                    returObj.unselected[key] = false;\r\n                }\r\n            }\r\n            return returObj;\r\n        }\r\n\r\n        function getSidenavItems () {\r\n            return utils.loadSideMenu('administration');\r\n        }\r\n        \r\n        function getErrorTranslationValue (errorcode) {\r\n            return utils.errorHandler(errorcode);\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .factory('userService', userService);\r\n\r\n    function userService () {\r\n        var userObj = {};\r\n        var currentUserProfile;\r\n\r\n        userObj.saveCurrentUserProfile = saveCurrentUserProfile;\r\n        userObj.getAllCurrentUserProfile = getAllCurrentUserProfile;\r\n        userObj.getCurrentUserProfile = getCurrentUserProfile;\r\n        userObj.hasPermission = hasPermission;\r\n\r\n        return userObj;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function saveCurrentUserProfile (userProfile) {\r\n            currentUserProfile = angular.copy(userProfile);\r\n            currentUserProfile.privilegeArray = currentUserProfile.privileges.split(',');\r\n            userProfile = null;\r\n        }\r\n        \r\n        function getAllCurrentUserProfile () {\r\n            return angular.copy(currentUserProfile);\r\n        }\r\n        \r\n        function getCurrentUserProfile (property) {\r\n            var value;\r\n            if(currentUserProfile.hasOwnProperty){\r\n                value = currentUserProfile[property];\r\n            }\r\n            else{\r\n                throw {message: 'Missing property in Current user profile'};\r\n            }\r\n            return value;\r\n        }\r\n        \r\n        function hasPermission (permissionString) {\r\n            var isValid = (currentUserProfile.privilegeArray.indexOf(permissionString) === -1)? false: true;\r\n            return isValid;\r\n        }\r\n    }\r\n\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .factory('utils', utilsFactory);\r\n\r\n    utilsFactory.$inject = ['$q', '$http', '$localStorage'];\r\n    function utilsFactory ($q, $http, $localStorage) {\r\n        var utilsObj = {};\r\n        var allTranslations;\r\n        utilsObj.getLanguage = getLanguage;\r\n        utilsObj.setLanguage = setLanguage;\r\n        utilsObj.getCss = getCss;\r\n        utilsObj.setCss = setCss;\r\n        utilsObj.getTranslation = getTranslation;\r\n        utilsObj.getLanguagesAvailable = getLanguagesAvailable;\r\n        utilsObj.errorHandler = errorHandler;\r\n        utilsObj.loadSideMenu = loadSideMenu;\r\n        return utilsObj;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function getLanguage () {\r\n            $localStorage.lang = $localStorage.lang || 'en-US';\r\n            return $localStorage.lang;\r\n        }\r\n\r\n        function setLanguage (lang) {\r\n            $localStorage.lang = lang;\r\n        }\r\n\r\n        function getCss () {\r\n            $localStorage.css = $localStorage.css || 'lang-en';\r\n            return $localStorage.css;\r\n        }\r\n\r\n        function setCss (css) {\r\n            $localStorage.css = css;\r\n        }\r\n\r\n        function getTranslation (lang) {\r\n            var temp = allTranslations? $q.resolve(allTranslations) : loadTranslation(lang);\r\n            return temp;\r\n        }\r\n        function loadTranslation (lang) {\r\n            var url = 'data/translations/translations.all-' + lang + '.json';\r\n            return $http.get(url)\r\n                .then(function (response) {\r\n                return response.data.translation;\r\n            })\r\n                .catch(function (error) {\r\n                return $q.reject(error);\r\n            });\r\n        }\r\n\r\n        function getLanguagesAvailable () {\r\n            return [\r\n                {name: 'English', langCode: 'en-US', css: 'lang-en', direction: 'ltr'},\r\n                {name: 'العَرَبِيَّة', langCode: 'ar', css: 'lang-ar', direction: 'rtl'}\r\n            ];\r\n        }\r\n\r\n        function errorHandler (errorCode) {\r\n            var errStr;\r\n            switch(errorCode){\r\n                case 'FD200': errStr = 'cmcm_Success';break;\r\n                case 'FD207': errStr = 'cmcm_MultipleStatusCodes';break;\r\n                case 'FD400': errStr = 'cmcm_BadRequest';break;\r\n                case 'FD500': errStr = 'cmcm_ServerError';break;\r\n                case 'FD401': errStr = 'cmcm_UnauthorizedAccess';break;\r\n                case 'FD501': errStr = 'cmcm_UnsupportedOperation';break;\r\n                case 'FD412': errStr = 'cmcm_LoginRequired';break;\r\n                case 'FD406': errStr = 'cmcm_InvalidCredentials';break;\r\n                case 'FD101': errStr = 'cmcm_ValidUserNameRequired';break;\r\n                case 'FD102': errStr = 'cmcm_ValidPasswordRequired';break;\r\n                case 'FD103': errStr = 'cmcm_ValidNameRequired';break;\r\n                case 'FD104': errStr = 'cmcm_ValidDescriptionRequired';break;\r\n                case 'FD105': errStr = 'cmcm_ValidIdRequired';break;\r\n                case 'FD106': errStr = 'cmcm_ValidIdsRequired';break;\r\n                case 'FD107': errStr = 'cmcm_ValidPageRequired';break;\r\n                case 'FD108': errStr = 'cmcm_ValidPageSizeRequired';break;\r\n                case 'FD109': errStr = 'cmcm_ValidSortByRequired';break;\r\n                case 'FD110': errStr = 'cmcm_NameNotAvailable';break;\r\n                case 'FD111': errStr = 'cmcm_RoleIsInUse';break;\r\n                case 'FD112': errStr = 'cmcm_RoleNotFound';break;\r\n                case 'FD113': errStr = 'cmcm_CodeNotAvailable';break;\r\n                case 'FD114': errStr = 'cmcm_ValidCodeRequired';break;\r\n                case 'FD115': errStr = 'cmcm_ValidAddress1Required';break;\r\n                case 'FD116': errStr = 'cmcm_ValidAddress2Required';break;\r\n                case 'FD117': errStr = 'cmcm_ValidAddress3Required';break;\r\n                case 'FD118': errStr = 'cmcm_ValidAddress4Required';break;\r\n                case 'FD119': errStr = 'cmcm_ValidZipRequired';break;\r\n                case 'FD120': errStr = 'cmcm_BranchNotFound';break;\r\n                case 'FD121': errStr = 'cmcm_DepartmentNotFound';break;\r\n                case 'FD122': errStr = 'cmcm_ValidFirstNameRequired';break;\r\n                case 'FD123': errStr = 'cmcm_ValidMiddleNameRequired';break;\r\n                case 'FD124': errStr = 'cmcm_ValidLastNameRequired';break;\r\n                case 'FD125': errStr = 'cmcm_ValidEmailRequired';break;\r\n                case 'FD126': errStr = 'cmcm_ValidTimeZoneRequired';break;\r\n                case 'FD127': errStr = 'cmcm_ValidActivationDateRequired';break;\r\n                case 'FD128': errStr = 'cmcm_ValidDateFormatRequired';break;\r\n                case 'FD129': errStr = 'cmcm_UserNameNotAvailable';break;\r\n                case 'FD130': errStr = 'cmcm_EmailIdNotAvailable';break;\r\n                case 'FD131': errStr = 'cmcm_UserNotFound';break;\r\n                default: errStr = 'cmcm_UnknownError';break;\r\n            }\r\n            return errStr;\r\n        }\r\n\r\n        function loadSideMenu (module) {\r\n            return $http.get('data/menu-data.json')\r\n                .then(function (response) {\r\n                var temp = module? response.data[module] : response.data;\r\n                return temp;\r\n            })\r\n                .catch(function (error) {\r\n                return error;\r\n            });\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('dashboard.module')\r\n        .controller('DashboardController', DashboardController);\r\n\r\n    DashboardController.$inject = [];\r\n\r\n    function DashboardController () {\r\n\r\n        var vm = this;\r\n        vm.status = true;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('dashboard.module')\r\n        .factory('dashboardService', dashboardService);\r\n\r\n    dashboardService.$inject = [];\r\n\r\n    function dashboardService () {\r\n        var dashObject = {};\r\n        return dashObject;\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('headerArea.module')\r\n        .controller('HeaderAreaController', HeaderAreaController);\r\n\r\n    HeaderAreaController.$inject = ['headerAreaService'];\r\n\r\n    function HeaderAreaController (headerAreaService) {\r\n\r\n        var vm = this;\r\n        vm.currentUser = {};\r\n        \r\n        init();\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n        \r\n        function init () {\r\n            vm.currentUser = headerAreaService.populateCurrentUserObj();\r\n        }\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('headerArea.module')\r\n        .factory('headerAreaService', headerAreaService);\r\n\r\n    headerAreaService.$inject = ['userService'];\r\n\r\n    function headerAreaService (userService) {\r\n        var headerObj = {};\r\n        headerObj.populateCurrentUserObj = populateCurrentUserObj;\r\n        return headerObj;\r\n        \r\n        //--------------------------------------\r\n        //function declarations\r\n        \r\n        function populateCurrentUserObj () {\r\n            return userService.getAllCurrentUserProfile();\r\n        }\r\n        \r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('login.module')\r\n        .controller('LoginController', LoginController);\r\n\r\n    LoginController.$inject = ['$state', 'loginService', 'toastr', 'utils', '$scope'];\r\n\r\n    function LoginController ($state, loginService, toastr, utils, $scope) {\r\n\r\n        var vm = this;\r\n        vm.user ={\r\n            name: '',\r\n            password: ''\r\n        };\r\n        vm.translation = {};\r\n        vm.languagesAvailable = utils.getLanguagesAvailable();\r\n        vm.selectedLanguage = null;\r\n\r\n        vm.onLoginSubmit = onLoginSubmit;\r\n        vm.onLanguageChange = onLanguageChange;\r\n\r\n        init();\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function init () {\r\n            var lang = utils.getLanguage();\r\n            vm.selectedLanguage = vm.languagesAvailable.find(function (item) {\r\n                return item.langCode === lang;\r\n            });\r\n            loadTranslation(lang);\r\n        }\r\n\r\n        function loadTranslation (lang) {\r\n            utils.getTranslation(lang)\r\n                .then(onGetTranslationSuccess)\r\n                .catch(onGetTranslationError);\r\n        }\r\n\r\n        function onGetTranslationSuccess (response) {\r\n            //console.log(response);\r\n            vm.translation = response;\r\n        }\r\n\r\n        function onGetTranslationError (error) {\r\n            //console.log(error);\r\n            toastr.error(vm.translation.cmcm_TranslationLoadError);\r\n        }\r\n\r\n        function onLoginSubmit () {\r\n            var isValid = loginService.validateLoginForm(vm.user);\r\n            if(isValid){\r\n                loginService.requestLogin(vm.user)\r\n                    .then(onLoginSuccess)\r\n                    .catch(onLoginError);\r\n            }\r\n        }\r\n\r\n        function onLoginSuccess (response) {\r\n            loginService.saveCurrentUserProfile(response.items[0]);\r\n            $state.go('root.dashboard');\r\n        }\r\n\r\n        function onLoginError (error) {\r\n            var errorTranslation = loginService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Login Error');\r\n        }\r\n\r\n        function onLanguageChange () {\r\n            var langCode = vm.selectedLanguage.langCode;\r\n            utils.setLanguage(langCode);\r\n            loadTranslation(langCode);\r\n            $scope.$parent.app.css = vm.selectedLanguage.css;\r\n            utils.setCss(vm.selectedLanguage.css);\r\n        }\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('login.module')\r\n        .factory('loginService', loginService);\r\n\r\n    loginService.$inject = ['$http', 'webServiceURL', 'utils', 'userService'];\r\n\r\n    function loginService ($http, webServiceURL, utils, userService) {\r\n        var loginObj = {};\r\n        loginObj.validateLoginForm = validateLoginForm;\r\n        loginObj.requestLogin = requestLogin;\r\n        loginObj.saveCurrentUserProfile = saveCurrentUserProfile;\r\n        loginObj.getErrorTranslationValue = getErrorTranslationValue;\r\n\r\n        return loginObj;\r\n\r\n        function validateLoginForm (requestObj) {\r\n            var isValid = (requestObj.name.trim() && requestObj.password.trim())? true : false;\r\n            return isValid;\r\n        }\r\n\r\n        function requestLogin (requestObj) {\r\n            var obj = {\r\n                userName: requestObj.name,\r\n                password: requestObj.password\r\n            };\r\n            var url = webServiceURL.apiBase + webServiceURL.login;\r\n            return $http.post(url, obj);\r\n        }\r\n\r\n        function saveCurrentUserProfile (userProfile) {\r\n            userService.saveCurrentUserProfile(userProfile);\r\n        }\r\n\r\n        function getErrorTranslationValue (errorcode) {\r\n            return utils.errorHandler(errorcode);\r\n        }\r\n\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('role.module')\r\n        .controller('RoleController', RoleController);\r\n\r\n    RoleController.$inject = ['roleService', '$uibModal', 'toastr'];\r\n\r\n    function RoleController (roleService, $uibModal, toastr) {\r\n\r\n        var vm = this;\r\n        vm.roleList = [];\r\n        vm.isExpandedState = true;\r\n        vm.deletePopupData = {};\r\n        vm.updateRolePopupData = getUpdateRolePopupData();\r\n        vm.createRolePopupData = getCreateRolePopupData();\r\n        //vm.itemTree = roleService.getSidenavItems();\r\n        //vm.selectedFolder = vm.itemTree[0];\r\n        vm.searchOptions = getSearchOptions();\r\n        vm.advSearch = getAdvSearchOptions();\r\n        vm.idList = '';\r\n\r\n        vm.onDeleteRoleInitiate = onDeleteRoleInitiate;\r\n        vm.onUpdateRoleInitiate = onUpdateRoleInitiate;\r\n        vm.onCreateRoleInitiate = onCreateRoleInitiate;\r\n        vm.loadRoleData = loadRoleData;\r\n\r\n        init();\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function init () {\r\n            onAllAPISuccess();\r\n            roleService.getSidenavItems()\r\n                .then(populateSidenav);\r\n        }\r\n\r\n        function onAllAPISuccess () {\r\n            loadRoleList();\r\n        }\r\n\r\n        function loadRoleList () {\r\n            roleService.loadRoleList(vm.searchOptions)\r\n                .then(onLoadRoleListSuccess)\r\n                .catch(onLoadRoleListError);\r\n        }\r\n\r\n        function onLoadRoleListSuccess (response) {\r\n            //console.log(response);\r\n            vm.roleList = response.items;\r\n            vm.searchOptions.totalItems = response.totalNumPages;\r\n        }\r\n\r\n        function onLoadRoleListError (error) {\r\n            //console.log(error);\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at listing Role');\r\n        }\r\n\r\n        function onDeleteRoleInitiate (roleItem) {\r\n            vm.deletePopupData = getDeletePopupData();\r\n            vm.deletePopupData.successResult = roleItem.id;\r\n            vm.deletePopupData.description = 'Do you want to delete this role (' + roleItem.name + ')?';\r\n\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/common/confirmDialog/confirm.dialog.template.html',\r\n                controller: 'ModalInstanceCtrl',\r\n                controllerAs: '$ctrl',\r\n                size: 'sm',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.deletePopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(deleteRole);\r\n        }\r\n\r\n        function getDeletePopupData () {\r\n            var temp = {\r\n                headingText: 'Delete Role',\r\n                confirmText: 'Yes',\r\n                cancelText: 'No',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel'\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function deleteRole (roleId) {\r\n            var requestObj = {\r\n                ids: [roleId]\r\n            };\r\n            roleService.deleteRole(requestObj)\r\n                .then(onDeleteRoleSuccess)\r\n                .catch(onDeleteRoleError);\r\n        }\r\n\r\n        function onDeleteRoleSuccess (response) {\r\n            console.log(response);\r\n            toastr.success('Deleted the role', 'Delete Role');\r\n            //reload role table\r\n            loadRoleList();\r\n        }\r\n\r\n        function onDeleteRoleError (error) {\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at listing Role');\r\n        }\r\n\r\n        function onUpdateRoleInitiate (item) {\r\n            var requestObj = {\r\n                id: item.id\r\n            };\r\n            roleService.loadRoleDetails(requestObj)\r\n                .then(onLoadRoleDetailsSuccess)\r\n                .catch(onLoadRoleDetailsError);\r\n        }\r\n\r\n        function onLoadRoleDetailsSuccess (response) {\r\n            vm.updateRolePopupData.item = response.items[0];\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/role/create-update/role.create.update.template.html',\r\n                controller: 'RoleUpdateController',\r\n                controllerAs: 'roleDialog',\r\n                size: 'md',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.updateRolePopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(onUpdateRoleSuccess);\r\n        }\r\n\r\n        function onLoadRoleDetailsError (error) {\r\n            console.log(error);\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at loading Role details');\r\n        }\r\n\r\n        function onUpdateRoleSuccess () {\r\n            //update tree\r\n            loadRoleList();\r\n        }\r\n\r\n        function getUpdateRolePopupData () {\r\n            var temp = {\r\n                headingText: 'Update Role',\r\n                confirmText: 'Update',\r\n                cancelText: 'Cancel',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel',\r\n                currentPermissions: [],\r\n                item: null,\r\n                mode: 'update',\r\n                translation: null\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function onCreateRoleInitiate () {\r\n            vm.createRolePopupData.item = {\r\n                name: '',\r\n                description: '',\r\n                privileges: ''\r\n            };\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/role/create-update/role.create.update.template.html',\r\n                controller: 'RoleUpdateController',\r\n                controllerAs: 'roleDialog',\r\n                size: 'md',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.createRolePopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(onCreateRoleSuccess);\r\n        }\r\n\r\n        function onCreateRoleSuccess () {\r\n            //update tree\r\n            loadRoleList();\r\n        }\r\n\r\n        function getCreateRolePopupData () {\r\n            var temp = {\r\n                headingText: 'Create Role',\r\n                confirmText: 'Create',\r\n                cancelText: 'Cancel',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel',\r\n                currentPermissions: [],\r\n                item: null,\r\n                mode: 'create',\r\n                translation: null\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function loadRoleData () {\r\n            var temp = vm.idList\r\n            .split(/\\s*,\\s*/)\r\n            .map(function (item) {\r\n                return parseInt(item.trim(), 10);\r\n            })\r\n            .filter(function (item) {\r\n                return !isNaN(item);\r\n            })\r\n            .join(',');\r\n            vm.searchOptions.createdByUserIds = temp || undefined;\r\n            loadRoleList();\r\n        }\r\n\r\n        function getSearchOptions () {\r\n            var nowDate = new Date();\r\n            var fromDate = new Date(nowDate);\r\n            fromDate.setFullYear(fromDate.getFullYear() - 1);\r\n\r\n            var temp = {\r\n                totalItems: 0,\r\n                page : 1,\r\n                pageSize: 30,\r\n                sortBy: 'name',\r\n                sortOrder: 'A',\r\n                searchText: '',\r\n                createdDateFrom: fromDate,\r\n                createdDateTo: nowDate,\r\n                createdByUserIds: []\r\n            };\r\n            return temp;\r\n        }\r\n\r\n        function getAdvSearchOptions () {\r\n            var temp = {\r\n                isOpen: false,\r\n                dateCreatedFromIsOpen: false,\r\n                dateCreatedToIsOpen: false\r\n            };\r\n            return temp;\r\n        }\r\n\r\n        function populateSidenav (response) {\r\n            vm.itemTree = response;\r\n            vm.selectedFolder = vm.itemTree[0];\r\n        }\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('role.module')\r\n        .factory('roleService', roleService);\r\n\r\n    roleService.$inject = ['$http', 'webServiceURL', 'utils', 'permissions'];\r\n\r\n    function roleService ($http, webServiceURL, utils, permissions) {\r\n        var roleObject = {};\r\n        roleObject.loadRoleList = loadRoleList;\r\n        roleObject.loadRoleDetails = loadRoleDetails;\r\n        roleObject.createRole = createRole;\r\n        roleObject.updateRole = updateRole;\r\n        roleObject.deleteRole = deleteRole;\r\n        roleObject.getPermissionArray = getPermissionArray;\r\n        roleObject.getSidenavItems = getSidenavItems;\r\n        roleObject.getErrorTranslationValue = getErrorTranslationValue;\r\n\r\n        return roleObject;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function loadRoleList (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roleList;\r\n            return $http.get(url, {params: requestObj});\r\n        }\r\n\r\n        function deleteRole (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roledelete;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function createRole (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roleCreate;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function updateRole (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roleUpdate;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function loadRoleDetails (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roleDetails;\r\n            return $http.get(url, requestObj);\r\n        }\r\n\r\n        function getPermissionArray (privileges) {\r\n            var temp = privileges.split(',');\r\n            var returObj = {\r\n                unselected: {},\r\n                selected: {}\r\n            };\r\n            for(var key in permissions){\r\n                if(temp.indexOf(key) < 0){\r\n                    returObj.selected[key] = false;\r\n                }\r\n                else{\r\n                    returObj.unselected[key] = false;\r\n                }\r\n            }\r\n            return returObj;\r\n        }\r\n\r\n        function getSidenavItems () {\r\n            return utils.loadSideMenu('administration');\r\n        }\r\n        \r\n        function getErrorTranslationValue (errorcode) {\r\n            return utils.errorHandler(errorcode);\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('app.core.module')\r\n        .controller('BranchUpdateController', BranchUpdateController);\r\n\r\n    BranchUpdateController.$inject = ['$uibModalInstance', 'dialogData', 'toastr', 'utils', 'branchService'];\r\n\r\n    function BranchUpdateController ($uibModalInstance, dialogData, toastr, utils, branchService) {\r\n        var vm = this;\r\n        vm.activeTab = 0;\r\n        vm.data = dialogData;\r\n        vm.branch = {\r\n            name: dialogData.item.name,\r\n            description: dialogData.item.description\r\n        };\r\n        var permissionList = branchService.getPermissionArray(dialogData.item.privileges);\r\n        var mode = dialogData.mode;\r\n\r\n        vm.unselectedPermissions = permissionList.selected;\r\n        vm.selectedPermissions = permissionList.unselected;\r\n\r\n        vm.validateBranchDetail = validateBranchDetail;\r\n        vm.movePermissions = movePermissions;\r\n        vm.createUpdateBranch = createUpdateBranch;\r\n        vm.nextTab = nextTab;\r\n        vm.cancel = cancel;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function validateBranchDetail () {\r\n            var isValid =  ((vm.branch.name) && (vm.branch.description))? true : false;\r\n            return isValid;\r\n        }\r\n\r\n        function movePermissions (item1, item2, forceMove) {\r\n            if(!Object.keys(item1).length){\r\n                return;\r\n            }\r\n            for(var key in item1){\r\n                if(item1.hasOwnProperty(key)){\r\n                    if(item1[key] || forceMove){\r\n                        item2[key] = false;\r\n                        delete item1[key];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function nextTab () {\r\n            vm.activeTab = 1;\r\n        }\r\n        function cancel () {\r\n            $uibModalInstance.dismiss(vm.data.cancelResult);\r\n        }\r\n\r\n        function createUpdateBranch () {\r\n            if(mode === 'create'){\r\n                createBranch();\r\n            }\r\n            else{\r\n                updateBranch();\r\n            }\r\n        }\r\n\r\n        function createBranch () {\r\n            var privileges = createPermissionString(vm.selectedPermissions);\r\n            var requestObj = {\r\n                name: vm.branch.name,\r\n                description: vm.branch.description,\r\n                privileges: privileges\r\n            };\r\n            console.log(requestObj);\r\n            branchService.createBranch(requestObj)\r\n                .then(onCreateBranchSuccess)\r\n                .catch(onCreateBranchError);\r\n        }\r\n\r\n        function onCreateBranchSuccess () {\r\n            $uibModalInstance.close();\r\n            toastr.success('Success', 'Creating Branch');\r\n        }\r\n\r\n        function onCreateBranchError (error) {\r\n            console.log(error);\r\n            var errorTranslation = branchService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error in creating Branch');\r\n        }\r\n\r\n        function updateBranch () {\r\n            var privileges = createPermissionString(vm.selectedPermissions);\r\n            var requestObj = {\r\n                id: vm.data.item.id,\r\n                name: vm.branch.name,\r\n                description: vm.branch.description,\r\n                privileges: privileges\r\n            };\r\n            console.log(requestObj);\r\n            branchService.updateBranch(requestObj)\r\n                .then(onUpdateBranchSuccess)\r\n                .catch(onUpdateBranchError);\r\n        }\r\n\r\n        function onUpdateBranchSuccess () {\r\n            $uibModalInstance.close();\r\n            toastr.success('Success', 'Updating Branch');\r\n        }\r\n\r\n        function onUpdateBranchError (error) {\r\n            console.log(error);\r\n            var errorTranslation = branchService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error in updating Branch');\r\n        }\r\n\r\n        function createPermissionString (Obj) {\r\n            var privileges = '';\r\n            var temp = [];\r\n            for(var key in Obj){\r\n                if(Obj.hasOwnProperty(key)){\r\n                    temp.push(key);\r\n                }\r\n            }\r\n            if(temp.length){\r\n                privileges = temp.join(',');\r\n            }\r\n            \r\n            return privileges;\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('app.core.module')\r\n        .controller('ModalInstanceCtrl', ModalInstanceCtrl);\r\n\r\n    ModalInstanceCtrl.$inject = ['$uibModalInstance', 'dialogData'];\r\n\r\n    function ModalInstanceCtrl ($uibModalInstance, dialogData) {\r\n        var vm = this;\r\n        vm.data = dialogData;\r\n\r\n        vm.ok = function () {\r\n            $uibModalInstance.close(vm.data.successResult);\r\n        };\r\n\r\n        vm.cancel = function () {\r\n            $uibModalInstance.dismiss(vm.data.cancelResult);\r\n        };\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .directive('branch', branchDirective);\r\n\r\n    branchDirective.$inject = ['$compile', 'jQuery', '$state'];\r\n    function branchDirective ($compile, $, $state) {\r\n        var directiveObject = {\r\n            replace: true,\r\n            restrict: 'E',\r\n            scope: {\r\n                item: '=',\r\n                selectedFolder: '='\r\n            },\r\n            templateUrl: 'js/modules/common/tree/branch.directive.template.html',\r\n            link: branchLink,\r\n            controller: BranchController,\r\n            controllerAs: 'branch',\r\n            bindToController: true\r\n        };\r\n\r\n        BranchController.$inject = ['$scope'];\r\n\r\n        return directiveObject;\r\n\r\n        function branchLink (scope, element, attributes, ctrl) {\r\n            var $element = $(element);\r\n\r\n            ctrl.toggleOpenState = toggleOpenState;\r\n\r\n            if(angular.isArray(scope.branch.item.children)){\r\n                $compile('<tree collection=\"branch.item.children\" selected-folder=\"tree.selectedFolder\"></tree>')(scope, function (cloned) {\r\n                    element.append(cloned);\r\n                });\r\n            }\r\n\r\n            function toggleOpenState (event) {\r\n                event.stopPropagation();\r\n                ctrl.isOpen = !ctrl.isOpen;\r\n                if(ctrl.isOpen){\r\n                    $element.children('.menu-tree').slideDown();\r\n                }\r\n                else{\r\n                    scope.$emit('folderOpened');\r\n                    $element.children('.menu-tree').slideUp();\r\n                }\r\n            }\r\n        }\r\n\r\n        function BranchController ($scope) {\r\n            var vm = this;\r\n            //vm.isActive = false;\r\n            vm.isActive = vm.item === vm.selectedFolder;\r\n            vm.isOpen = false;\r\n            vm.onItemClick = onItemClick;\r\n            vm.hasInnerFolder = checkForInnerFolder();\r\n            //vm.toggleOpenState = toggleOpenState;\r\n            $scope.$on('folderSelectFromExplorer', onFolderSelect);\r\n            $scope.$on('folderOpened', folderOpenedLitener);\r\n\r\n            function onItemClick (item) {\r\n                if(item.hasOwnProperty('sref')){\r\n                    $state.go(item.sref);\r\n                }\r\n                else{\r\n                    $scope.$emit('folderSelectFromTree', item);\r\n                }\r\n            }\r\n\r\n            function onFolderSelect (event, item) {\r\n                if(item === vm.item){\r\n                    vm.isActive = true;\r\n                    vm.isOpen = true;\r\n                    $scope.$emit('folderOpened');\r\n                }\r\n                else{\r\n                    vm.isActive = false;\r\n                }\r\n            }\r\n\r\n            function folderOpenedLitener () {\r\n                //console.log(vm.item.title);\r\n            }\r\n\r\n            function checkForInnerFolder () {\r\n                var hasFolder = false;\r\n                angular.forEach(vm.item.children, function (item) {\r\n                    if(item.type === 'Folder'){\r\n                        hasFolder = true;\r\n                    }\r\n                });\r\n                return hasFolder;\r\n            }\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .directive('slideToggle', slideToggleDirective);\r\n\r\n    slideToggleDirective.$inject = ['jQuery'];\r\n    function slideToggleDirective ($) {\r\n        var directiveObject = {\r\n            restrict: 'A',\r\n            link: slideToggleLink,\r\n        };\r\n\r\n        return directiveObject;\r\n\r\n        function slideToggleLink (scope, element) {\r\n            var $element = $(element);\r\n            element.on('click', function () {\r\n                if($element.hasClass('active')){\r\n                    $element.siblings('.menu-tree').slideDown();\r\n                }\r\n                else{\r\n                    $element.siblings('.menu-tree').slideUp();\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .directive('stopPropagation', stopPropagationDirective);\r\n\r\n    function stopPropagationDirective () {\r\n        var directiveObject = {\r\n            replace: true,\r\n            restrict: 'A',\r\n            scope: {\r\n                collection: '='\r\n            },\r\n            link: stopPropagationLink,\r\n            controller: TreeController,\r\n            controllerAs: 'stopPropagation',\r\n            bindToController: true\r\n        };\r\n\r\n        return directiveObject;\r\n\r\n        function stopPropagationLink (scope, element) {\r\n            element.on('click', function (event) {\r\n                event.stopPropagation();\r\n            });\r\n        }\r\n\r\n        function TreeController () {\r\n            //var vm = this;\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .directive('tree', treeDirective);\r\n\r\n    function treeDirective () {\r\n        var directiveObject = {\r\n            replace: true,\r\n            restrict: 'E',\r\n            scope: {\r\n                collection: '=',\r\n                selectedFolder: '='\r\n            },\r\n            templateUrl: 'js/modules/common/tree/tree.directive.template.html',\r\n            link: treeLink,\r\n            controller: TreeController,\r\n            controllerAs: 'tree',\r\n            bindToController: true\r\n        };\r\n        \r\n        return directiveObject;\r\n\r\n        //function treeLink (scope, element, attributes, ctrl) {\r\n        function treeLink () {\r\n            //console.log(ctrl.collection);\r\n        }\r\n        \r\n        function TreeController () {\r\n            //var vm = this;\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('app.core.module')\r\n        .controller('RoleUpdateController', RoleUpdateController);\r\n\r\n    RoleUpdateController.$inject = ['$uibModalInstance', 'dialogData', 'toastr', 'utils', 'roleService'];\r\n\r\n    function RoleUpdateController ($uibModalInstance, dialogData, toastr, utils, roleService) {\r\n        var vm = this;\r\n        vm.activeTab = 0;\r\n        vm.data = dialogData;\r\n        vm.role = {\r\n            name: dialogData.item.name,\r\n            description: dialogData.item.description\r\n        };\r\n        var permissionList = roleService.getPermissionArray(dialogData.item.privileges);\r\n        var mode = dialogData.mode;\r\n\r\n        vm.unselectedPermissions = permissionList.selected;\r\n        vm.selectedPermissions = permissionList.unselected;\r\n\r\n        vm.validateRoleDetail = validateRoleDetail;\r\n        vm.movePermissions = movePermissions;\r\n        vm.createUpdateRole = createUpdateRole;\r\n        vm.nextTab = nextTab;\r\n        vm.cancel = cancel;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function validateRoleDetail () {\r\n            var isValid =  ((vm.role.name) && (vm.role.description))? true : false;\r\n            return isValid;\r\n        }\r\n\r\n        function movePermissions (item1, item2, forceMove) {\r\n            if(!Object.keys(item1).length){\r\n                return;\r\n            }\r\n            for(var key in item1){\r\n                if(item1.hasOwnProperty(key)){\r\n                    if(item1[key] || forceMove){\r\n                        item2[key] = false;\r\n                        delete item1[key];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function nextTab () {\r\n            vm.activeTab = 1;\r\n        }\r\n        function cancel () {\r\n            $uibModalInstance.dismiss(vm.data.cancelResult);\r\n        }\r\n\r\n        function createUpdateRole () {\r\n            if(mode === 'create'){\r\n                createRole();\r\n            }\r\n            else{\r\n                updateRole();\r\n            }\r\n        }\r\n\r\n        function createRole () {\r\n            var privileges = createPermissionString(vm.selectedPermissions);\r\n            var requestObj = {\r\n                name: vm.role.name,\r\n                description: vm.role.description,\r\n                privileges: privileges\r\n            };\r\n            console.log(requestObj);\r\n            roleService.createRole(requestObj)\r\n                .then(onCreateRoleSuccess)\r\n                .catch(onCreateRoleError);\r\n        }\r\n\r\n        function onCreateRoleSuccess () {\r\n            $uibModalInstance.close();\r\n            toastr.success('Success', 'Creating Role');\r\n        }\r\n\r\n        function onCreateRoleError (error) {\r\n            console.log(error);\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error in creating Role');\r\n        }\r\n\r\n        function updateRole () {\r\n            var privileges = createPermissionString(vm.selectedPermissions);\r\n            var requestObj = {\r\n                id: vm.data.item.id,\r\n                name: vm.role.name,\r\n                description: vm.role.description,\r\n                privileges: privileges\r\n            };\r\n            console.log(requestObj);\r\n            roleService.updateRole(requestObj)\r\n                .then(onUpdateRoleSuccess)\r\n                .catch(onUpdateRoleError);\r\n        }\r\n\r\n        function onUpdateRoleSuccess () {\r\n            $uibModalInstance.close();\r\n            toastr.success('Success', 'Updating Role');\r\n        }\r\n\r\n        function onUpdateRoleError (error) {\r\n            console.log(error);\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error in updating Role');\r\n        }\r\n\r\n        function createPermissionString (Obj) {\r\n            var privileges = '';\r\n            var temp = [];\r\n            for(var key in Obj){\r\n                if(Obj.hasOwnProperty(key)){\r\n                    temp.push(key);\r\n                }\r\n            }\r\n            if(temp.length){\r\n                privileges = temp.join(',');\r\n            }\r\n            \r\n            return privileges;\r\n        }\r\n    }\r\n})();"]}