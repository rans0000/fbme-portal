{"version":3,"sources":["app.core.module.js","app.controller.js","app.core.constants.js","dashboard/dashboard.module.js","headerArea/headerArea.module.js","login/login.module.js","role/role.module.js","common/user.service.js","common/utils.service.js","dashboard/dashboard.controller.js","dashboard/dashboard.service.js","headerArea/headerArea.controller.js","headerArea/headerArea.service.js","login/login.controller.js","login/login.service.js","role/role.controller.js","role/role.service.js","common/confirmDialog/confirm.dialog.controller.js","common/tree/branch.directive.js","common/tree/slide.toggle.directive.js","common/tree/stop.propagation.directve.js","common/tree/tree.directive.js","role/create-update/role.create.update.controller.js"],"names":["httpProviderConfiguration","$httpProvider","defaults","headers","post","paramSerializer","routerConfiguration","$stateProvider","$urlRouterProvider","otherwise","interceptors","push","state","url","templateUrl","controller","controllerAs","abstract","views","","headerArea@root","httpRequestInterceptor","$q","webServiceURL","interceptResponseSuccess","response","returnValue","config","startsWith","apiBase","data","header","responseCode","reject","body","interceptResponseError","errObj","status","message","statusText","requestUrl","interceptObject","responseError","jQueryService","jQuery","debugConfiguration","$compileProvider","debugInfoEnabled","angular","module","factory","$inject","AppController","utils","vm","this","css","getCss","getWebServiceURL","temp","login","roleList","roleDetails","roleCreate","roleUpdate","roledelete","getPermissions","PERSONAL_DOCS","ADMIN","COLLABORATION_ADMIN","ROLE_MANAGEMENT","BRANCH_MANAGEMENT","DEPARTMENT_MANAGEMENT","SETTINGS_MANAGEMENT","USER_MANAGEMENT","USER_GROUP_MANAGEMENT","constant","userService","saveCurrentUserProfile","userProfile","currentUserProfile","copy","privilegeArray","privileges","split","getAllCurrentUserProfile","getCurrentUserProfile","property","value","hasOwnProperty","hasPermission","permissionString","isValid","indexOf","userObj","utilsFactory","$http","$localStorage","getLanguage","lang","setLanguage","setCss","getTranslation","allTranslations","resolve","loadTranslation","get","then","translation","catch","error","getLanguagesAvailable","name","langCode","direction","errorHandler","errorCode","errStr","loadSideMenu","utilsObj","DashboardController","dashboardService","dashObject","HeaderAreaController","headerAreaService","init","currentUser","populateCurrentUserObj","headerObj","LoginController","$state","loginService","toastr","$scope","selectedLanguage","languagesAvailable","find","item","onGetTranslationSuccess","onGetTranslationError","cmcm_TranslationLoadError","onLoginSubmit","validateLoginForm","user","requestLogin","onLoginSuccess","onLoginError","items","go","errorTranslation","getErrorTranslationValue","onLanguageChange","$parent","app","password","requestObj","trim","obj","userName","Password","errorcode","loginObj","RoleController","roleService","$uibModal","onAllAPISuccess","getSidenavItems","populateSidenav","loadRoleList","searchOptions","onLoadRoleListSuccess","onLoadRoleListError","totalItems","totalNumPages","onDeleteRoleInitiate","roleItem","deletePopupData","getDeletePopupData","successResult","id","description","modalInstance","open","ariaLabelledBy","ariaDescribedBy","size","dialogData","result","deleteRole","headingText","confirmText","cancelText","cancelResult","roleId","ids","onDeleteRoleSuccess","onDeleteRoleError","console","log","success","onUpdateRoleInitiate","loadRoleDetails","onLoadRoleDetailsSuccess","onLoadRoleDetailsError","updateRolePopupData","onUpdateRoleSuccess","getUpdateRolePopupData","currentPermissions","mode","onCreateRoleInitiate","createRolePopupData","onCreateRoleSuccess","getCreateRolePopupData","loadRoleData","idList","map","parseInt","filter","isNaN","join","createdByUserIds","undefined","getSearchOptions","nowDate","Date","fromDate","setFullYear","getFullYear","page","pageSize","sortBy","sortOrder","searchText","createdDateFrom","createdDateTo","getAdvSearchOptions","isOpen","dateCreatedFromIsOpen","dateCreatedToIsOpen","itemTree","selectedFolder","isExpandedState","advSearch","permissions","params","createRole","updateRole","getPermissionArray","returObj","unselected","selected","key","roleObject","ModalInstanceCtrl","$uibModalInstance","ok","close","cancel","dismiss","branchDirective","$compile","$","branchLink","scope","element","attributes","ctrl","toggleOpenState","event","stopPropagation","$element","children","slideDown","$emit","slideUp","isArray","branch","cloned","append","BranchController","onItemClick","sref","onFolderSelect","isActive","folderOpenedLitener","checkForInnerFolder","hasFolder","forEach","type","hasInnerFolder","$on","directiveObject","replace","restrict","link","bindToController","directive","slideToggleDirective","slideToggleLink","on","hasClass","siblings","stopPropagationDirective","stopPropagationLink","TreeController","collection","treeDirective","treeLink","RoleUpdateController","validateRoleDetail","role","movePermissions","item1","item2","forceMove","Object","keys","length","nextTab","activeTab","createUpdateRole","createPermissionString","selectedPermissions","onCreateRoleError","onUpdateRoleError","Obj","permissionList","unselectedPermissions"],"mappings":"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","file":"main.min.js","sourcesContent":["/*jshint browser: true*/\r\n/*global angular: true*/\r\n/*global jQuery: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module', [\r\n        'ui.router',\r\n        'ui.bootstrap',\r\n        'toastr',\r\n        'ngStorage',\r\n        'headerArea.module',\r\n        'ui.bootstrap.contextMenu',\r\n        'login.module',\r\n        'dashboard.module',\r\n        'role.module'\r\n    ])\r\n        .config(httpProviderConfiguration)\r\n        .config(routerConfiguration)\r\n        .config(debugConfiguration)\r\n        .factory('httpRequestInterceptor', httpRequestInterceptor)\r\n        .factory('jQuery', jQueryService);\r\n\r\n    httpProviderConfiguration.$inject = ['$httpProvider'];\r\n    function httpProviderConfiguration ($httpProvider) {\r\n        $httpProvider.defaults.headers.post[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\r\n        $httpProvider.defaults.paramSerializer = '$httpParamSerializerJQLike';\r\n    }\r\n\r\n    routerConfiguration.$inject = ['$stateProvider', '$urlRouterProvider', '$httpProvider'];\r\n    function routerConfiguration ($stateProvider, $urlRouterProvider, $httpProvider) {\r\n        $urlRouterProvider.otherwise('/login');\r\n        $httpProvider.interceptors.push('httpRequestInterceptor');\r\n\r\n        $stateProvider\r\n            .state('login', {\r\n            url: '/login',\r\n            templateUrl: 'js/modules/login/login.template.html',\r\n            controller: 'LoginController',\r\n            controllerAs: 'login'\r\n        })\r\n            .state('root', {\r\n            abstract: true,\r\n            views: {\r\n                '': {\r\n                    templateUrl: 'js/modules/contentArea/contentArea.template.html'\r\n                },\r\n                'headerArea@root': {\r\n                    templateUrl: 'js/modules/headerArea/headerArea.template.html',\r\n                    controller: 'HeaderAreaController',\r\n                    controllerAs: 'header'\r\n                }\r\n            }\r\n        })/*\r\n            .state('dashboard', {\r\n            url: '/dashboard',\r\n            templateUrl: 'js/modules/dashboard/dashboard.template.html',\r\n            controller: 'DashboardController',\r\n            controllerAs: 'vm'\r\n        })*/;\r\n    }\r\n\r\n    httpRequestInterceptor.$inject = ['$q', 'webServiceURL'];\r\n    function httpRequestInterceptor ($q, webServiceURL) {\r\n        var interceptObject = {};\r\n        //interceptObject.request = interceptRequest;\r\n        interceptObject.response = interceptResponseSuccess;\r\n        interceptObject.responseError = interceptResponseError;\r\n        return interceptObject;\r\n\r\n        function interceptResponseSuccess (response) {\r\n            var returnValue = response;\r\n            if(response.config.url.startsWith(webServiceURL.apiBase)){\r\n                //response.data.header.responseCode is FD200 for success\r\n                if(response.data.header && response.data.header.responseCode !== 'FD200'){\r\n                    returnValue = $q.reject(response.data);\r\n                }\r\n                else{\r\n                    returnValue = response.data.body? response.data.body : {};\r\n                }\r\n            }\r\n            return returnValue;\r\n        }\r\n\r\n        function interceptResponseError (response) {\r\n            var errObj = {\r\n                header: {\r\n                    responseCode: response.status,\r\n                    message: response.statusText,\r\n                    requestUrl: response.config.url\r\n                }\r\n            };\r\n            return $q.reject(errObj);\r\n        }\r\n    }\r\n\r\n    function jQueryService () {\r\n        return jQuery;\r\n    }\r\n\r\n    debugConfiguration.$inject = ['$compileProvider'];\r\n    function debugConfiguration ($compileProvider) {\r\n        $compileProvider.debugInfoEnabled(false);\r\n    }\r\n\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .controller('AppController', AppController);\r\n\r\n    AppController.$inject = ['utils'];\r\n    function AppController (utils) {\r\n        var vm = this;\r\n        vm.css = utils.getCss();\r\n    }\r\n\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .constant('webServiceURL', getWebServiceURL())\r\n        .constant('permissions', getPermissions());\r\n\r\n    function getWebServiceURL () {\r\n        var temp = {\r\n            apiBase: 'http://localhost:8090/FDocs/api/',\r\n            login: 'auth/login.json',\r\n            roleList: 'role/list.json',\r\n            roleDetails: 'role/details.json',\r\n            roleCreate: 'role/create.json',\r\n            roleUpdate: 'role/update.json',\r\n            roledelete: 'role/delete.json'\r\n        };\r\n        return temp;\r\n    }\r\n\r\n    function getPermissions () {\r\n        var temp = {\r\n            PERSONAL_DOCS: 1,\r\n            ADMIN: 2,\r\n            COLLABORATION_ADMIN: 4,\r\n            ROLE_MANAGEMENT: 8,\r\n            BRANCH_MANAGEMENT: 16,\r\n            DEPARTMENT_MANAGEMENT: 32,\r\n            SETTINGS_MANAGEMENT: 64,\r\n            USER_MANAGEMENT: 128,\r\n            USER_GROUP_MANAGEMENT: 256\r\n        };\r\n        return temp;\r\n    }\r\n\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('dashboard.module', [])\r\n        .config(routerConfiguration);\r\n\r\n    routerConfiguration.$inject = ['$stateProvider'];\r\n    function routerConfiguration ($stateProvider) {\r\n        $stateProvider\r\n            .state('root.dashboard', {\r\n            url: '/dashboard',\r\n            templateUrl: 'js/modules/dashboard/dashboard.template.html',\r\n            controller: 'DashboardController',\r\n            controllerAs: 'dash'\r\n        });\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('headerArea.module', []);\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('login.module', []);\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('role.module', [])\r\n        .config(routerConfiguration);\r\n\r\n    routerConfiguration.$inject = ['$stateProvider'];\r\n    function routerConfiguration ($stateProvider) {\r\n        $stateProvider\r\n            .state('root.role', {\r\n            url: '/role',\r\n            templateUrl: 'js/modules/role/role.template.html',\r\n            controller: 'RoleController',\r\n            controllerAs: 'role'\r\n        });\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .factory('userService', userService);\r\n\r\n    function userService () {\r\n        var userObj = {};\r\n        var currentUserProfile;\r\n\r\n        userObj.saveCurrentUserProfile = saveCurrentUserProfile;\r\n        userObj.getAllCurrentUserProfile = getAllCurrentUserProfile;\r\n        userObj.getCurrentUserProfile = getCurrentUserProfile;\r\n        userObj.hasPermission = hasPermission;\r\n\r\n        return userObj;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function saveCurrentUserProfile (userProfile) {\r\n            currentUserProfile = angular.copy(userProfile);\r\n            currentUserProfile.privilegeArray = currentUserProfile.privileges.split(',');\r\n            userProfile = null;\r\n        }\r\n        \r\n        function getAllCurrentUserProfile () {\r\n            return angular.copy(currentUserProfile);\r\n        }\r\n        \r\n        function getCurrentUserProfile (property) {\r\n            var value;\r\n            if(currentUserProfile.hasOwnProperty){\r\n                value = currentUserProfile[property];\r\n            }\r\n            else{\r\n                throw {message: 'Missing property in Current user profile'};\r\n            }\r\n            return value;\r\n        }\r\n        \r\n        function hasPermission (permissionString) {\r\n            var isValid = (currentUserProfile.privilegeArray.indexOf(permissionString) === -1)? false: true;\r\n            return isValid;\r\n        }\r\n    }\r\n\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .factory('utils', utilsFactory);\r\n\r\n    utilsFactory.$inject = ['$q', '$http', '$localStorage'];\r\n    function utilsFactory ($q, $http, $localStorage) {\r\n        var utilsObj = {};\r\n        var allTranslations;\r\n        utilsObj.getLanguage = getLanguage;\r\n        utilsObj.setLanguage = setLanguage;\r\n        utilsObj.getCss = getCss;\r\n        utilsObj.setCss = setCss;\r\n        utilsObj.getTranslation = getTranslation;\r\n        utilsObj.getLanguagesAvailable = getLanguagesAvailable;\r\n        utilsObj.errorHandler = errorHandler;\r\n        utilsObj.loadSideMenu = loadSideMenu;\r\n        return utilsObj;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function getLanguage () {\r\n            $localStorage.lang = $localStorage.lang || 'en-US';\r\n            return $localStorage.lang;\r\n        }\r\n\r\n        function setLanguage (lang) {\r\n            $localStorage.lang = lang;\r\n        }\r\n\r\n        function getCss () {\r\n            $localStorage.css = $localStorage.css || 'lang-en';\r\n            return $localStorage.css;\r\n        }\r\n\r\n        function setCss (css) {\r\n            $localStorage.css = css;\r\n        }\r\n\r\n        function getTranslation (lang) {\r\n            var temp = allTranslations? $q.resolve(allTranslations) : loadTranslation(lang);\r\n            return temp;\r\n        }\r\n        function loadTranslation (lang) {\r\n            var url = 'data/translations/translations.all-' + lang + '.json';\r\n            return $http.get(url)\r\n                .then(function (response) {\r\n                return response.data.translation;\r\n            })\r\n                .catch(function (error) {\r\n                return $q.reject(error);\r\n            });\r\n        }\r\n\r\n        function getLanguagesAvailable () {\r\n            return [\r\n                {name: 'English', langCode: 'en-US', css: 'lang-en', direction: 'ltr'},\r\n                {name: 'العَرَبِيَّة', langCode: 'ar', css: 'lang-ar', direction: 'rtl'}\r\n            ];\r\n        }\r\n\r\n        function errorHandler (errorCode) {\r\n            var errStr;\r\n            switch(errorCode){\r\n                case 'FD200': errStr = 'cmcm_Success';break;\r\n                case 'FD207': errStr = 'cmcm_MultipleStatusCodes';break;\r\n                case 'FD400': errStr = 'cmcm_BadRequest';break;\r\n                case 'FD500': errStr = 'cmcm_ServerError';break;\r\n                case 'FD401': errStr = 'cmcm_UnauthorizedAccess';break;\r\n                case 'FD501': errStr = 'cmcm_UnsupportedOperation';break;\r\n                case 'FD412': errStr = 'cmcm_LoginRequired';break;\r\n                case 'FD406': errStr = 'cmcm_InvalidCredentials';break;\r\n                case 'FD101': errStr = 'cmcm_ValidUserNameRequired';break;\r\n                case 'FD102': errStr = 'cmcm_ValidPasswordRequired';break;\r\n                case 'FD103': errStr = 'cmcm_ValidNameRequired';break;\r\n                case 'FD104': errStr = 'cmcm_ValidDescriptionRequired';break;\r\n                case 'FD105': errStr = 'cmcm_ValidIdRequired';break;\r\n                case 'FD106': errStr = 'cmcm_ValidIdsRequired';break;\r\n                case 'FD107': errStr = 'cmcm_ValidPageRequired';break;\r\n                case 'FD108': errStr = 'cmcm_ValidPageSizeRequired';break;\r\n                case 'FD109': errStr = 'cmcm_ValidSortByRequired';break;\r\n                case 'FD110': errStr = 'cmcm_NameNotAvailable';break;\r\n                case 'FD111': errStr = 'cmcm_RoleIsInUse';break;\r\n                case 'FD112': errStr = 'cmcm_RoleNotFound';break;\r\n                case 'FD113': errStr = 'cmcm_CodeNotAvailable';break;\r\n                case 'FD114': errStr = 'cmcm_ValidCodeRequired';break;\r\n                case 'FD115': errStr = 'cmcm_ValidAddress1Required';break;\r\n                case 'FD116': errStr = 'cmcm_ValidAddress2Required';break;\r\n                case 'FD117': errStr = 'cmcm_ValidAddress3Required';break;\r\n                case 'FD118': errStr = 'cmcm_ValidAddress4Required';break;\r\n                case 'FD119': errStr = 'cmcm_ValidZipRequired';break;\r\n                case 'FD120': errStr = 'cmcm_BranchNotFound';break;\r\n                case 'FD121': errStr = 'cmcm_DepartmentNotFound';break;\r\n                case 'FD122': errStr = 'cmcm_ValidFirstNameRequired';break;\r\n                case 'FD123': errStr = 'cmcm_ValidMiddleNameRequired';break;\r\n                case 'FD124': errStr = 'cmcm_ValidLastNameRequired';break;\r\n                case 'FD125': errStr = 'cmcm_ValidEmailRequired';break;\r\n                case 'FD126': errStr = 'cmcm_ValidTimeZoneRequired';break;\r\n                case 'FD127': errStr = 'cmcm_ValidActivationDateRequired';break;\r\n                case 'FD128': errStr = 'cmcm_ValidDateFormatRequired';break;\r\n                case 'FD129': errStr = 'cmcm_UserNameNotAvailable';break;\r\n                case 'FD130': errStr = 'cmcm_EmailIdNotAvailable';break;\r\n                case 'FD131': errStr = 'cmcm_UserNotFound';break;\r\n                default: errStr = 'cmcm_UnknownError';break;\r\n            }\r\n            return errStr;\r\n        }\r\n\r\n        function loadSideMenu (module) {\r\n            return $http.get('data/menu-data.json')\r\n                .then(function (response) {\r\n                var temp = module? response.data[module] : response.data;\r\n                return temp;\r\n            })\r\n                .catch(function (error) {\r\n                return error;\r\n            });\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('dashboard.module')\r\n        .controller('DashboardController', DashboardController);\r\n\r\n    DashboardController.$inject = [];\r\n\r\n    function DashboardController () {\r\n\r\n        var vm = this;\r\n        vm.status = true;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('dashboard.module')\r\n        .factory('dashboardService', dashboardService);\r\n\r\n    dashboardService.$inject = [];\r\n\r\n    function dashboardService () {\r\n        var dashObject = {};\r\n        return dashObject;\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('headerArea.module')\r\n        .controller('HeaderAreaController', HeaderAreaController);\r\n\r\n    HeaderAreaController.$inject = ['headerAreaService'];\r\n\r\n    function HeaderAreaController (headerAreaService) {\r\n\r\n        var vm = this;\r\n        vm.currentUser = {};\r\n        \r\n        init();\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n        \r\n        function init () {\r\n            vm.currentUser = headerAreaService.populateCurrentUserObj();\r\n        }\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('headerArea.module')\r\n        .factory('headerAreaService', headerAreaService);\r\n\r\n    headerAreaService.$inject = ['userService'];\r\n\r\n    function headerAreaService (userService) {\r\n        var headerObj = {};\r\n        headerObj.populateCurrentUserObj = populateCurrentUserObj;\r\n        return headerObj;\r\n        \r\n        //--------------------------------------\r\n        //function declarations\r\n        \r\n        function populateCurrentUserObj () {\r\n            return userService.getAllCurrentUserProfile();\r\n        }\r\n        \r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('login.module')\r\n        .controller('LoginController', LoginController);\r\n\r\n    LoginController.$inject = ['$state', 'loginService', 'toastr', 'utils', '$scope'];\r\n\r\n    function LoginController ($state, loginService, toastr, utils, $scope) {\r\n\r\n        var vm = this;\r\n        vm.user ={\r\n            name: '',\r\n            password: ''\r\n        };\r\n        vm.translation = {};\r\n        vm.languagesAvailable = utils.getLanguagesAvailable();\r\n        vm.selectedLanguage = null;\r\n\r\n        vm.onLoginSubmit = onLoginSubmit;\r\n        vm.onLanguageChange = onLanguageChange;\r\n\r\n        init();\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function init () {\r\n            var lang = utils.getLanguage();\r\n            vm.selectedLanguage = vm.languagesAvailable.find(function (item) {\r\n                return item.langCode === lang;\r\n            });\r\n            loadTranslation(lang);\r\n        }\r\n\r\n        function loadTranslation (lang) {\r\n            utils.getTranslation(lang)\r\n                .then(onGetTranslationSuccess)\r\n                .catch(onGetTranslationError);\r\n        }\r\n\r\n        function onGetTranslationSuccess (response) {\r\n            //console.log(response);\r\n            vm.translation = response;\r\n        }\r\n\r\n        function onGetTranslationError (error) {\r\n            //console.log(error);\r\n            toastr.error(vm.translation.cmcm_TranslationLoadError);\r\n        }\r\n\r\n        function onLoginSubmit () {\r\n            var isValid = loginService.validateLoginForm(vm.user);\r\n            if(isValid){\r\n                loginService.requestLogin(vm.user)\r\n                    .then(onLoginSuccess)\r\n                    .catch(onLoginError);\r\n            }\r\n        }\r\n\r\n        function onLoginSuccess (response) {\r\n            loginService.saveCurrentUserProfile(response.items[0]);\r\n            $state.go('root.dashboard');\r\n        }\r\n\r\n        function onLoginError (error) {\r\n            var errorTranslation = loginService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Login Error');\r\n        }\r\n\r\n        function onLanguageChange () {\r\n            var langCode = vm.selectedLanguage.langCode;\r\n            utils.setLanguage(langCode);\r\n            loadTranslation(langCode);\r\n            $scope.$parent.app.css = vm.selectedLanguage.css;\r\n            utils.setCss(vm.selectedLanguage.css);\r\n        }\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('login.module')\r\n        .factory('loginService', loginService);\r\n\r\n    loginService.$inject = ['$http', 'webServiceURL', 'utils', 'userService'];\r\n\r\n    function loginService ($http, webServiceURL, utils, userService) {\r\n        var loginObj = {};\r\n        loginObj.validateLoginForm = validateLoginForm;\r\n        loginObj.requestLogin = requestLogin;\r\n        loginObj.saveCurrentUserProfile = saveCurrentUserProfile;\r\n        loginObj.getErrorTranslationValue = getErrorTranslationValue;\r\n\r\n        return loginObj;\r\n\r\n        function validateLoginForm (requestObj) {\r\n            var isValid = (requestObj.name.trim() && requestObj.password.trim())? true : false;\r\n            return isValid;\r\n        }\r\n\r\n        function requestLogin (requestObj) {\r\n            var obj = {\r\n                userName: requestObj.name,\r\n                Password: requestObj.password\r\n            };\r\n            var url = webServiceURL.apiBase + webServiceURL.login;\r\n            return $http.post(url, obj);\r\n        }\r\n\r\n        function saveCurrentUserProfile (userProfile) {\r\n            userService.saveCurrentUserProfile(userProfile);\r\n        }\r\n\r\n        function getErrorTranslationValue (errorcode) {\r\n            return utils.errorHandler(errorcode);\r\n        }\r\n\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('role.module')\r\n        .controller('RoleController', RoleController);\r\n\r\n    RoleController.$inject = ['roleService', '$uibModal', 'toastr'];\r\n\r\n    function RoleController (roleService, $uibModal, toastr) {\r\n\r\n        var vm = this;\r\n        vm.roleList = [];\r\n        vm.isExpandedState = true;\r\n        vm.deletePopupData = {};\r\n        vm.updateRolePopupData = getUpdateRolePopupData();\r\n        vm.createRolePopupData = getCreateRolePopupData();\r\n        //vm.itemTree = roleService.getSidenavItems();\r\n        //vm.selectedFolder = vm.itemTree[0];\r\n        vm.searchOptions = getSearchOptions();\r\n        vm.advSearch = getAdvSearchOptions();\r\n        vm.idList = '';\r\n\r\n        vm.onDeleteRoleInitiate = onDeleteRoleInitiate;\r\n        vm.onUpdateRoleInitiate = onUpdateRoleInitiate;\r\n        vm.onCreateRoleInitiate = onCreateRoleInitiate;\r\n        vm.loadRoleData = loadRoleData;\r\n\r\n        init();\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function init () {\r\n            onAllAPISuccess();\r\n            roleService.getSidenavItems()\r\n                .then(populateSidenav);\r\n        }\r\n\r\n        function onAllAPISuccess () {\r\n            loadRoleList();\r\n        }\r\n\r\n        function loadRoleList () {\r\n            roleService.loadRoleList(vm.searchOptions)\r\n                .then(onLoadRoleListSuccess)\r\n                .catch(onLoadRoleListError);\r\n        }\r\n\r\n        function onLoadRoleListSuccess (response) {\r\n            //console.log(response);\r\n            vm.roleList = response.items;\r\n            vm.searchOptions.totalItems = response.totalNumPages;\r\n        }\r\n\r\n        function onLoadRoleListError (error) {\r\n            //console.log(error);\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at listing Role');\r\n        }\r\n\r\n        function onDeleteRoleInitiate (roleItem) {\r\n            vm.deletePopupData = getDeletePopupData();\r\n            vm.deletePopupData.successResult = roleItem.id;\r\n            vm.deletePopupData.description = 'Do you want to delete this role (' + roleItem.name + ')?';\r\n\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/common/confirmDialog/confirm.dialog.template.html',\r\n                controller: 'ModalInstanceCtrl',\r\n                controllerAs: '$ctrl',\r\n                size: 'sm',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.deletePopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(deleteRole);\r\n        }\r\n\r\n        function getDeletePopupData () {\r\n            var temp = {\r\n                headingText: 'Delete Role',\r\n                confirmText: 'Yes',\r\n                cancelText: 'No',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel'\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function deleteRole (roleId) {\r\n            var requestObj = {\r\n                ids: [roleId]\r\n            };\r\n            roleService.deleteRole(requestObj)\r\n                .then(onDeleteRoleSuccess)\r\n                .catch(onDeleteRoleError);\r\n        }\r\n\r\n        function onDeleteRoleSuccess (response) {\r\n            console.log(response);\r\n            toastr.success('Deleted the role', 'Delete Role');\r\n            //reload role table\r\n            loadRoleList();\r\n        }\r\n\r\n        function onDeleteRoleError (error) {\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at listing Role');\r\n        }\r\n\r\n        function onUpdateRoleInitiate (item) {\r\n            var requestObj = {\r\n                id: item.id\r\n            };\r\n            roleService.loadRoleDetails(requestObj)\r\n                .then(onLoadRoleDetailsSuccess)\r\n                .catch(onLoadRoleDetailsError);\r\n        }\r\n\r\n        function onLoadRoleDetailsSuccess (response) {\r\n            vm.updateRolePopupData.item = response.items[0];\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/role/create-update/role.create.update.template.html',\r\n                controller: 'RoleUpdateController',\r\n                controllerAs: 'roleDialog',\r\n                size: 'md',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.updateRolePopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(onUpdateRoleSuccess);\r\n        }\r\n\r\n        function onLoadRoleDetailsError (error) {\r\n            console.log(error);\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error at loading Role details');\r\n        }\r\n\r\n        function onUpdateRoleSuccess () {\r\n            //update tree\r\n            loadRoleList();\r\n        }\r\n\r\n        function getUpdateRolePopupData () {\r\n            var temp = {\r\n                headingText: 'Update Role',\r\n                confirmText: 'Update',\r\n                cancelText: 'Cancel',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel',\r\n                currentPermissions: [],\r\n                item: null,\r\n                mode: 'update',\r\n                translation: null\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function onCreateRoleInitiate () {\r\n            vm.createRolePopupData.item = {\r\n                name: '',\r\n                description: '',\r\n                privileges: ''\r\n            };\r\n            var modalInstance = $uibModal.open({\r\n                ariaLabelledBy: 'modal-title',\r\n                ariaDescribedBy: 'modal-body',\r\n                templateUrl: 'js/modules/role/create-update/role.create.update.template.html',\r\n                controller: 'RoleUpdateController',\r\n                controllerAs: 'roleDialog',\r\n                size: 'md',\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return vm.createRolePopupData;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then(onCreateRoleSuccess);\r\n        }\r\n\r\n        function onCreateRoleSuccess () {\r\n            //update tree\r\n            loadRoleList();\r\n        }\r\n\r\n        function getCreateRolePopupData () {\r\n            var temp = {\r\n                headingText: 'Create Role',\r\n                confirmText: 'Create',\r\n                cancelText: 'Cancel',\r\n                description: '',\r\n                successResult: '',\r\n                cancelResult: 'cancel',\r\n                currentPermissions: [],\r\n                item: null,\r\n                mode: 'create',\r\n                translation: null\r\n            };\r\n\r\n            return temp;\r\n        }\r\n\r\n        function loadRoleData () {\r\n            var temp = vm.idList\r\n            .split(/\\s*,\\s*/)\r\n            .map(function (item) {\r\n                return parseInt(item.trim(), 10);\r\n            })\r\n            .filter(function (item) {\r\n                return !isNaN(item);\r\n            })\r\n            .join(',');\r\n            vm.searchOptions.createdByUserIds = temp || undefined;\r\n            loadRoleList();\r\n        }\r\n\r\n        function getSearchOptions () {\r\n            var nowDate = new Date();\r\n            var fromDate = new Date(nowDate);\r\n            fromDate.setFullYear(fromDate.getFullYear() - 1);\r\n\r\n            var temp = {\r\n                totalItems: 0,\r\n                page : 1,\r\n                pageSize: 30,\r\n                sortBy: 'name',\r\n                sortOrder: 'A',\r\n                searchText: '',\r\n                createdDateFrom: fromDate,\r\n                createdDateTo: nowDate,\r\n                createdByUserIds: []\r\n            };\r\n            return temp;\r\n        }\r\n\r\n        function getAdvSearchOptions () {\r\n            var temp = {\r\n                isOpen: false,\r\n                dateCreatedFromIsOpen: false,\r\n                dateCreatedToIsOpen: false\r\n            };\r\n            return temp;\r\n        }\r\n\r\n        function populateSidenav (response) {\r\n            vm.itemTree = response;\r\n            vm.selectedFolder = vm.itemTree[0];\r\n        }\r\n    }\r\n})();\r\n","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('role.module')\r\n        .factory('roleService', roleService);\r\n\r\n    roleService.$inject = ['$http', 'webServiceURL', 'utils', 'permissions'];\r\n\r\n    function roleService ($http, webServiceURL, utils, permissions) {\r\n        var roleObject = {};\r\n        roleObject.loadRoleList = loadRoleList;\r\n        roleObject.loadRoleDetails = loadRoleDetails;\r\n        roleObject.createRole = createRole;\r\n        roleObject.updateRole = updateRole;\r\n        roleObject.deleteRole = deleteRole;\r\n        roleObject.getPermissionArray = getPermissionArray;\r\n        roleObject.getSidenavItems = getSidenavItems;\r\n        roleObject.getErrorTranslationValue = getErrorTranslationValue;\r\n\r\n        return roleObject;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function loadRoleList (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roleList;\r\n            return $http.get(url, {params: requestObj});\r\n        }\r\n\r\n        function deleteRole (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roledelete;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function createRole (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roleCreate;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function updateRole (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roleUpdate;\r\n            return $http.post(url, requestObj);\r\n        }\r\n\r\n        function loadRoleDetails (requestObj) {\r\n            var url = webServiceURL.apiBase + webServiceURL.roleDetails;\r\n            return $http.get(url, requestObj);\r\n        }\r\n\r\n        function getPermissionArray (privileges) {\r\n            var temp = privileges.split(',');\r\n            var returObj = {\r\n                unselected: {},\r\n                selected: {}\r\n            };\r\n            for(var key in permissions){\r\n                if(temp.indexOf(key) < 0){\r\n                    returObj.selected[key] = false;\r\n                }\r\n                else{\r\n                    returObj.unselected[key] = false;\r\n                }\r\n            }\r\n            return returObj;\r\n        }\r\n\r\n        function getSidenavItems () {\r\n            return utils.loadSideMenu('administration');\r\n        }\r\n        \r\n        function getErrorTranslationValue (errorcode) {\r\n            return utils.errorHandler(errorcode);\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('app.core.module')\r\n        .controller('ModalInstanceCtrl', ModalInstanceCtrl);\r\n\r\n    ModalInstanceCtrl.$inject = ['$uibModalInstance', 'dialogData'];\r\n\r\n    function ModalInstanceCtrl ($uibModalInstance, dialogData) {\r\n        var vm = this;\r\n        vm.data = dialogData;\r\n\r\n        vm.ok = function () {\r\n            $uibModalInstance.close(vm.data.successResult);\r\n        };\r\n\r\n        vm.cancel = function () {\r\n            $uibModalInstance.dismiss(vm.data.cancelResult);\r\n        };\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .directive('branch', branchDirective);\r\n\r\n    branchDirective.$inject = ['$compile', 'jQuery', '$state'];\r\n    function branchDirective ($compile, $, $state) {\r\n        var directiveObject = {\r\n            replace: true,\r\n            restrict: 'E',\r\n            scope: {\r\n                item: '=',\r\n                selectedFolder: '='\r\n            },\r\n            templateUrl: 'js/modules/common/tree/branch.directive.template.html',\r\n            link: branchLink,\r\n            controller: BranchController,\r\n            controllerAs: 'branch',\r\n            bindToController: true\r\n        };\r\n\r\n        BranchController.$inject = ['$scope'];\r\n\r\n        return directiveObject;\r\n\r\n        function branchLink (scope, element, attributes, ctrl) {\r\n            var $element = $(element);\r\n\r\n            ctrl.toggleOpenState = toggleOpenState;\r\n\r\n            if(angular.isArray(scope.branch.item.children)){\r\n                $compile('<tree collection=\"branch.item.children\" selected-folder=\"tree.selectedFolder\"></tree>')(scope, function (cloned) {\r\n                    element.append(cloned);\r\n                });\r\n            }\r\n\r\n            function toggleOpenState (event) {\r\n                event.stopPropagation();\r\n                ctrl.isOpen = !ctrl.isOpen;\r\n                if(ctrl.isOpen){\r\n                    $element.children('.menu-tree').slideDown();\r\n                }\r\n                else{\r\n                    scope.$emit('folderOpened');\r\n                    $element.children('.menu-tree').slideUp();\r\n                }\r\n            }\r\n        }\r\n\r\n        function BranchController ($scope) {\r\n            var vm = this;\r\n            //vm.isActive = false;\r\n            vm.isActive = vm.item === vm.selectedFolder;\r\n            vm.isOpen = false;\r\n            vm.onItemClick = onItemClick;\r\n            vm.hasInnerFolder = checkForInnerFolder();\r\n            //vm.toggleOpenState = toggleOpenState;\r\n            $scope.$on('folderSelectFromExplorer', onFolderSelect);\r\n            $scope.$on('folderOpened', folderOpenedLitener);\r\n\r\n            function onItemClick (item) {\r\n                if(item.hasOwnProperty('sref')){\r\n                    $state.go(item.sref);\r\n                }\r\n                else{\r\n                    $scope.$emit('folderSelectFromTree', item);\r\n                }\r\n            }\r\n\r\n            function onFolderSelect (event, item) {\r\n                if(item === vm.item){\r\n                    vm.isActive = true;\r\n                    vm.isOpen = true;\r\n                    $scope.$emit('folderOpened');\r\n                }\r\n                else{\r\n                    vm.isActive = false;\r\n                }\r\n            }\r\n\r\n            function folderOpenedLitener () {\r\n                //console.log(vm.item.title);\r\n            }\r\n\r\n            function checkForInnerFolder () {\r\n                var hasFolder = false;\r\n                angular.forEach(vm.item.children, function (item) {\r\n                    if(item.type === 'Folder'){\r\n                        hasFolder = true;\r\n                    }\r\n                });\r\n                return hasFolder;\r\n            }\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .directive('slideToggle', slideToggleDirective);\r\n\r\n    slideToggleDirective.$inject = ['jQuery'];\r\n    function slideToggleDirective ($) {\r\n        var directiveObject = {\r\n            restrict: 'A',\r\n            link: slideToggleLink,\r\n        };\r\n\r\n        return directiveObject;\r\n\r\n        function slideToggleLink (scope, element) {\r\n            var $element = $(element);\r\n            element.on('click', function () {\r\n                if($element.hasClass('active')){\r\n                    $element.siblings('.menu-tree').slideDown();\r\n                }\r\n                else{\r\n                    $element.siblings('.menu-tree').slideUp();\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .directive('stopPropagation', stopPropagationDirective);\r\n\r\n    function stopPropagationDirective () {\r\n        var directiveObject = {\r\n            replace: true,\r\n            restrict: 'A',\r\n            scope: {\r\n                collection: '='\r\n            },\r\n            link: stopPropagationLink,\r\n            controller: TreeController,\r\n            controllerAs: 'stopPropagation',\r\n            bindToController: true\r\n        };\r\n\r\n        return directiveObject;\r\n\r\n        function stopPropagationLink (scope, element) {\r\n            element.on('click', function (event) {\r\n                event.stopPropagation();\r\n            });\r\n        }\r\n\r\n        function TreeController () {\r\n            //var vm = this;\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    angular.module('app.core.module')\r\n        .directive('tree', treeDirective);\r\n\r\n    function treeDirective () {\r\n        var directiveObject = {\r\n            replace: true,\r\n            restrict: 'E',\r\n            scope: {\r\n                collection: '=',\r\n                selectedFolder: '='\r\n            },\r\n            templateUrl: 'js/modules/common/tree/tree.directive.template.html',\r\n            link: treeLink,\r\n            controller: TreeController,\r\n            controllerAs: 'tree',\r\n            bindToController: true\r\n        };\r\n        \r\n        return directiveObject;\r\n\r\n        //function treeLink (scope, element, attributes, ctrl) {\r\n        function treeLink () {\r\n            //console.log(ctrl.collection);\r\n        }\r\n        \r\n        function TreeController () {\r\n            //var vm = this;\r\n        }\r\n    }\r\n})();","/*jshint browser: true*/\r\n/*global angular: true*/\r\n\r\n(function(){\r\n    'use strict';\r\n    angular.module('app.core.module')\r\n        .controller('RoleUpdateController', RoleUpdateController);\r\n\r\n    RoleUpdateController.$inject = ['$uibModalInstance', 'dialogData', 'toastr', 'utils', 'roleService'];\r\n\r\n    function RoleUpdateController ($uibModalInstance, dialogData, toastr, utils, roleService) {\r\n        var vm = this;\r\n        vm.activeTab = 0;\r\n        vm.data = dialogData;\r\n        vm.role = {\r\n            name: dialogData.item.name,\r\n            description: dialogData.item.description\r\n        };\r\n        var permissionList = roleService.getPermissionArray(dialogData.item.privileges);\r\n        var mode = dialogData.mode;\r\n\r\n        vm.unselectedPermissions = permissionList.selected;\r\n        vm.selectedPermissions = permissionList.unselected;\r\n\r\n        vm.validateRoleDetail = validateRoleDetail;\r\n        vm.movePermissions = movePermissions;\r\n        vm.createUpdateRole = createUpdateRole;\r\n        vm.nextTab = nextTab;\r\n        vm.cancel = cancel;\r\n\r\n        //--------------------------------------\r\n        //function declarations\r\n\r\n        function validateRoleDetail () {\r\n            var isValid =  ((vm.role.name) && (vm.role.description))? true : false;\r\n            return isValid;\r\n        }\r\n\r\n        function movePermissions (item1, item2, forceMove) {\r\n            if(!Object.keys(item1).length){\r\n                return;\r\n            }\r\n            for(var key in item1){\r\n                if(item1.hasOwnProperty(key)){\r\n                    if(item1[key] || forceMove){\r\n                        item2[key] = false;\r\n                        delete item1[key];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function nextTab () {\r\n            vm.activeTab = 1;\r\n        }\r\n        function cancel () {\r\n            $uibModalInstance.dismiss(vm.data.cancelResult);\r\n        }\r\n\r\n        function createUpdateRole () {\r\n            if(mode === 'create'){\r\n                createRole();\r\n            }\r\n            else{\r\n                updateRole();\r\n            }\r\n        }\r\n\r\n        function createRole () {\r\n            var privileges = createPermissionString(vm.selectedPermissions);\r\n            var requestObj = {\r\n                name: vm.role.name,\r\n                description: vm.role.description,\r\n                privileges: privileges\r\n            };\r\n            console.log(requestObj);\r\n            roleService.createRole(requestObj)\r\n                .then(onCreateRoleSuccess)\r\n                .catch(onCreateRoleError);\r\n        }\r\n\r\n        function onCreateRoleSuccess () {\r\n            $uibModalInstance.close();\r\n            toastr.success('Success', 'Creating Role');\r\n        }\r\n\r\n        function onCreateRoleError (error) {\r\n            console.log(error);\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error in creating Role');\r\n        }\r\n\r\n        function updateRole () {\r\n            var privileges = createPermissionString(vm.selectedPermissions);\r\n            var requestObj = {\r\n                id: vm.data.item.id,\r\n                name: vm.role.name,\r\n                description: vm.role.description,\r\n                privileges: privileges\r\n            };\r\n            console.log(requestObj);\r\n            roleService.updateRole(requestObj)\r\n                .then(onUpdateRoleSuccess)\r\n                .catch(onUpdateRoleError);\r\n        }\r\n\r\n        function onUpdateRoleSuccess () {\r\n            $uibModalInstance.close();\r\n            toastr.success('Success', 'Updating Role');\r\n        }\r\n\r\n        function onUpdateRoleError (error) {\r\n            console.log(error);\r\n            var errorTranslation = roleService.getErrorTranslationValue(error.header.responseCode);\r\n            toastr.error(errorTranslation, 'Error in updating Role');\r\n        }\r\n\r\n        function createPermissionString (Obj) {\r\n            var privileges = '';\r\n            var temp = [];\r\n            for(var key in Obj){\r\n                if(Obj.hasOwnProperty(key)){\r\n                    temp.push(key);\r\n                }\r\n            }\r\n            if(temp.length){\r\n                privileges = temp.join(',');\r\n            }\r\n            \r\n            return privileges;\r\n        }\r\n    }\r\n})();"]}